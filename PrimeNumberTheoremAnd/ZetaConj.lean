import Mathlib.Analysis.NormedSpace.Connected
import Mathlib.NumberTheory.Harmonic.ZetaAsymp

open scoped Complex ComplexConjugate

/-%%
\begin{theorem}[hasDerivAt_conj_conj]\label{hasDerivAt_conj_conj}\lean{hasDerivAt_conj_conj}\leanok
Let $f : \mathbb{C} \to \mathbb{C}$ be a complex differentiable function at $p \in \mathbb{C}$ with derivative $a$.
Then the function $g(z) = \overline{f(\overline{z})}$ is complex differentiable at $\overline{p}$ with derivative $\overline{a}$.
\end{theorem}
Already on Mathlib (with a shortened proof).
%%-/
theorem hasDerivAt_conj_conj {f : ‚ÑÇ ‚Üí ‚ÑÇ} {p a : ‚ÑÇ} (hf : HasDerivAt f a p) :
    HasDerivAt (fun z ‚Ü¶ conj (f (conj z))) (conj a) (conj p) := by
  rw [hasDerivAt_iff_tendsto] at hf ‚ä¢
  have := Complex.continuous_conj.tendsto (conj p)
  rw [Complex.conj_conj] at this
  have := Filter.Tendsto.comp hf this
  convert this with z
  simp only [Complex.conj_conj, smul_eq_mul, Function.comp_apply]
  congr 1
  ¬∑ congr 1
    rw[‚Üê Complex.norm_conj]
    simp
  ¬∑ rw[‚Üê Complex.norm_conj]
    simp
/-%%
\begin{proof}\leanok
We expand the definition of the derivative and compute.
\end{proof}
%%-/

/-%%
\begin{theorem}[deriv_conj_conj]\label{deriv_conj_conj}\lean{deriv_conj_conj}\leanok
Let $f : \mathbb{C} \to \mathbb{C}$ be a function at $p \in \mathbb{C}$ with derivative $a$.
Then the derivative of the function $g(z) = \overline{f(\overline{z})}$ at $\overline{p}$ is $\overline{a}$.
\end{theorem}
Submitted to Mathlib.
%%-/
theorem deriv_conj_conj (f : ‚ÑÇ ‚Üí ‚ÑÇ) (p : ‚ÑÇ) :
  deriv (fun z ‚Ü¶ conj (f (conj z))) (conj p) = conj (deriv f p) := by
  -- Case analysis on whether f is differentiable at p
  set g := fun z ‚Ü¶ conj (f (conj z))
  by_cases hf : DifferentiableAt ‚ÑÇ f p
  ¬∑ exact (hasDerivAt_conj_conj hf.hasDerivAt).deriv
  ¬∑ by_cases hg : DifferentiableAt ‚ÑÇ g (conj p)
    ¬∑ -- If the conjugated function were differentiable, then f would be differentiable
      have : DifferentiableAt ‚ÑÇ f p := by
        convert (hasDerivAt_conj_conj hg.hasDerivAt).differentiableAt using 2 <;> simp[g]
      contradiction
    ¬∑ -- Both derivatives are zero when the functions are not differentiable
      rw [deriv_zero_of_not_differentiableAt hg, deriv_zero_of_not_differentiableAt hf, map_zero]
/-%%
\begin{proof}\uses{hasDerivAt_conj_conj}\leanok
We proceed by case analysis on whether $f$ is differentiable at $p$.
If $f$ is differentiable at $p$, then we can apply the previous theorem.
If $f$ is not differentiable at $p$, then neither is $g$, and both derivatives have the default value of zero.
\end{proof}
%%-/

/-%%
\begin{theorem}[conj_riemannZeta_conj_aux1]\label{conj_riemannZeta_conj_aux1}\lean{conj_riemannZeta_conj_aux1}\leanok
Conjugation symmetry of the Riemann zeta function in the half-plane of convergence.
Let $s \in \mathbb{C}$ with $\Re(s) > 1$.
Then $\overline{\zeta(\overline{s})} = \zeta(s)$.
\end{theorem}
%%-/
lemma conj_riemannZeta_conj_aux1 (s : ‚ÑÇ) (hs : 1 < s.re) : conj (riemannZeta (conj s)) = riemannZeta s := by
  rw[zeta_eq_tsum_one_div_nat_add_one_cpow hs]
  rw[zeta_eq_tsum_one_div_nat_add_one_cpow]
  swap
  ¬∑ simpa
  rw [Complex.conj_tsum]
  congr
  ext n
  have : n + 1 ‚â† 0 := by linarith
  have : (n : ‚ÑÇ) + 1 ‚â† 0 := by exact_mod_cast this
  rw[Complex.cpow_def_of_ne_zero this]
  rw[Complex.cpow_def_of_ne_zero this]
  rw[RCLike.conj_div, map_one, ‚Üê Complex.exp_conj, map_mul, Complex.conj_conj]
  norm_cast
  rw[Complex.conj_ofReal]
/-%%
\begin{proof}\leanok
We expand the definition of the Riemann zeta function as a series and find that the two sides are equal term by term.
\end{proof}
%%-/

/-%%
\begin{theorem}[conj_riemannZeta_conj]\label{conj_riemannZeta_conj}\lean{conj_riemannZeta_conj}\leanok
Conjugation symmetry of the Riemann zeta function.
Let $s \in \mathbb{C}$.
Then $$\overline{\zeta(\overline{s})} = \zeta(s).$$
\end{theorem}

% TODO: Submit this and the following corollaries to Mathlib.
%%-/
theorem conj_riemannZeta_conj (s : ‚ÑÇ) : conj (riemannZeta (conj s)) = riemannZeta s := by
  by_cases hs1 : s = 1
  ¬∑ subst hs1
    rw[map_one, Complex.conj_eq_iff_real]
    rw[riemannZeta_one]
    use (Real.eulerMascheroniConstant - Real.log (4 * Real.pi)) / 2
    norm_cast
    rw[‚Üê Complex.ofReal_log]
    ¬∑ push_cast
      rfl
    ¬∑ positivity
  ¬∑ let U : Set ‚ÑÇ := {1}·∂ú
    let g := fun s ‚Ü¶ conj (riemannZeta (conj s))
    suffices Set.EqOn g riemannZeta U by
      apply this
      rwa[Set.mem_compl_singleton_iff]
    apply AnalyticOnNhd.eqOn_of_preconnected_of_eventuallyEq (ùïú := ‚ÑÇ) (z‚ÇÄ := 2)
    ¬∑ simp[U]
    ¬∑ rw [Filter.eventuallyEq_iff_exists_mem]
      set V := Complex.re ‚Åª¬π' (Set.Ioi 1)
      use V
      constructor
      ¬∑ have Vopen : IsOpen V := Continuous.isOpen_preimage Complex.continuous_re _ isOpen_Ioi
        have two_in_V : 2 ‚àà V := by simp[V]
        exact IsOpen.mem_nhds Vopen two_in_V
      ¬∑ intro s hs
        exact conj_riemannZeta_conj_aux1 s hs
    ¬∑ refine DifferentiableOn.analyticOnNhd ?_ isOpen_compl_singleton
      intro s‚ÇÅ hs‚ÇÅ
      have hs‚ÇÅ' : conj s‚ÇÅ ‚â† 1 := (map_ne_one_iff (starRingEnd ‚ÑÇ) (RingHom.injective (starRingEnd ‚ÑÇ))).mpr hs‚ÇÅ
      convert (hasDerivAt_conj_conj (differentiableAt_riemannZeta hs‚ÇÅ').hasDerivAt).differentiableAt.differentiableWithinAt (s := U)
      rw[Complex.conj_conj]
    ¬∑ refine DifferentiableOn.analyticOnNhd ?_ isOpen_compl_singleton
      intro s‚ÇÅ hs‚ÇÅ
      exact (differentiableAt_riemannZeta hs‚ÇÅ).differentiableWithinAt
    ¬∑ refine (?_ : IsConnected U).isPreconnected
      refine isConnected_compl_singleton_of_one_lt_rank ?_ 1
      simp
/-%%
\begin{proof}\uses{conj_riemannZeta_conj_aux1}\leanok
By the previous lemma, the two sides are equal on the half-plane $\{s \in \mathbb{C} : \Re(s) > 1\}$. Then, by analytic continuation, they are equal on the whole complex plane.
\end{proof}
%%-/

theorem riemannZeta_conj (s : ‚ÑÇ) : riemannZeta (conj s) = conj (riemannZeta s) := by
  rw [‚Üê conj_riemannZeta_conj, Complex.conj_conj]

theorem deriv_riemannZeta_conj (s : ‚ÑÇ) : deriv riemannZeta (conj s) = conj (deriv riemannZeta s) := by
  simp[‚Üê deriv_conj_conj, conj_riemannZeta_conj]

theorem logDerivZeta_conj (s : ‚ÑÇ) : (deriv riemannZeta / riemannZeta) (conj s) = conj ((deriv riemannZeta / riemannZeta) s) := by
  simp[deriv_riemannZeta_conj, riemannZeta_conj]

theorem logDerivZeta_conj' (s : ‚ÑÇ) : (logDeriv riemannZeta) (conj s) = conj (logDeriv riemannZeta s) := logDerivZeta_conj s


/-%%
\begin{theorem}[intervalIntegral_conj]\label{intervalIntegral_conj}\lean{intervalIntegral_conj}\leanok
The conjugation symmetry of the interval integral.
Let $f : \mathbb{R} \to \mathbb{C}$ be a measurable function, and let $a, b \in \mathbb{R}$.
Then $$\int_{a}^{b} \overline{f(x)} \, dx = \overline{\int_{a}^{b} f(x) \, dx}.$$
\end{theorem}

% TODO: Submit this to Mathlib.
%%-/
theorem intervalIntegral_conj {f : ‚Ñù ‚Üí ‚ÑÇ} {a b : ‚Ñù} : ‚à´ (x : ‚Ñù) in a..b, conj (f x) = conj (‚à´ (x : ‚Ñù) in a..b, f x) := by
  rw [intervalIntegral.intervalIntegral_eq_integral_uIoc, integral_conj]
  rw [‚Üê RCLike.conj_smul, ‚Üê intervalIntegral.intervalIntegral_eq_integral_uIoc]
/-%%
\begin{proof}\leanok
We unfold the interval integral into an integral over a uIoc and use the conjugation property of integrals.
\end{proof}
%%-/
