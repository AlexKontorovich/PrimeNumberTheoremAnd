/-
Copyright (c) 2024 Lawrence Wu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Lawrence Wu
-/

import Mathlib.Analysis.Asymptotics.Theta
import Mathlib.MeasureTheory.Integral.Asymptotics
import Mathlib.MeasureTheory.Integral.SetIntegral
import PrimeNumberTheoremAnd.Mathlib.Analysis.Asymptotics.Asymptotics

/-!
# Uniform Asymptotics

For a family of functions `f : Œπ √ó Œ± ‚Üí E` and `g : Œ± ‚Üí E`, we can think of
`f =O[ùìü s √óÀ¢ l] fun (i, x) ‚Ü¶ g x` as expressing that `f i` is O(g) uniformly on `s`.

This file provides methods for constructing `=O[ùìü s √óÀ¢ l]` relations (similarly `Œò`)
and deriving their consequences.
-/

open Filter

open Topology

namespace Asymptotics

variable {Œ± Œπ E F : Type*} {s : Set Œπ}

section Basic

variable [Norm E] [Norm F] {f : Œπ √ó Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±}

/-- If f = O(g) uniformly on `s`, then f_i = O(g) for any i.` -/
theorem isBigO_of_isBigOUniformly (h : f =O[ùìü s √óÀ¢ l] (g ‚àò Prod.snd)) {i : Œπ} (hi : i ‚àà s) :
    (fun x ‚Ü¶ f (i, x)) =O[l] g := by
  obtain ‚ü®C, hC‚ü© := h.bound
  obtain ‚ü®t, htl, ht‚ü© := hC.exists_mem
  obtain ‚ü®u, hu, v, hv, huv‚ü© := Filter.mem_prod_iff.mp htl
  refine isBigO_iff.mpr ‚ü®C, Filter.eventually_iff_exists_mem.mpr ‚ü®v, hv, ?_‚ü©‚ü©
  exact fun y hy ‚Ü¶ ht _ <| huv ‚ü®hu hi, hy‚ü©

/-- If f = Œ©(g) uniformly on `s`, then f_i = Œ©(g) for any i.` -/
theorem isBigO_rev_of_isBigOUniformly_rev (h : (g ‚àò Prod.snd) =O[ùìü s √óÀ¢ l] f) {i : Œπ} (hi : i ‚àà s) :
    g =O[l] fun x ‚Ü¶ f (i, x) := by
  obtain ‚ü®C, hC‚ü© := h.bound
  obtain ‚ü®t, htl, ht‚ü© := hC.exists_mem
  obtain ‚ü®u, hu, v, hv, huv‚ü© := Filter.mem_prod_iff.mp htl
  refine isBigO_iff.mpr ‚ü®C, Filter.eventually_iff_exists_mem.mpr ‚ü®v, hv, ?_‚ü©‚ü©
  exact fun y hy ‚Ü¶ ht (i, y) <| huv ‚ü®hu hi, hy‚ü©

/-- If f = Œò(g) uniformly on `s`, then f_i = Œò(g) for any i.` -/
theorem isTheta_of_isThetaUniformly (h : f =Œò[ùìü s √óÀ¢ l] (g ‚àò Prod.snd)) {i : Œπ} (hi : i ‚àà s) :
    (fun x ‚Ü¶ f (i, x)) =Œò[l] g :=
  ‚ü®isBigO_of_isBigOUniformly h.1 hi, isBigO_rev_of_isBigOUniformly_rev h.2 hi‚ü©

end Basic

section Order

variable [NormedAddCommGroup Œ±] [LinearOrder Œ±] [ProperSpace Œ±] [NormedAddCommGroup F]

theorem isLittleO_const_fst_atBot [NoMinOrder Œ±] [ClosedIicTopology Œ±] (c : F) (ly : Filter E) :
    (fun (_ : Œ± √ó E) ‚Ü¶ c) =o[atBot √óÀ¢ ly] Prod.fst := by
  refine ly.eq_or_neBot.casesOn (fun h ‚Ü¶ by simp [h]) (fun _ ‚Ü¶ ?_)
  show ((fun _ ‚Ü¶ c) ‚àò Prod.fst) =o[atBot √óÀ¢ ly] (id ‚àò Prod.fst)
  rewrite [‚Üê isLittleO_map, map_fst_prod]
  exact isLittleO_const_id_atBot2 c

theorem isLittleO_const_snd_atBot [NoMinOrder Œ±] [ClosedIicTopology Œ±] (c : F) (lx : Filter E) :
    (fun (_ : E √ó Œ±) ‚Ü¶ c) =o[lx √óÀ¢ atBot] Prod.snd := by
  refine lx.eq_or_neBot.casesOn (fun h ‚Ü¶ by simp [h]) (fun _ ‚Ü¶ ?_)
  show ((fun _ ‚Ü¶ c) ‚àò Prod.snd) =o[lx √óÀ¢ atBot] (id ‚àò Prod.snd)
  rewrite [‚Üê isLittleO_map, map_snd_prod]
  exact isLittleO_const_id_atBot2 c

theorem isLittleO_const_fst_atTop [NoMaxOrder Œ±] [ClosedIciTopology Œ±] (c : F) (ly : Filter E) :
    (fun (_ : Œ± √ó E) ‚Ü¶ c) =o[atTop √óÀ¢ ly] Prod.fst := by
  refine ly.eq_or_neBot.casesOn (fun h ‚Ü¶ by simp [h]) (fun _ ‚Ü¶ ?_)
  show ((fun _ ‚Ü¶ c) ‚àò Prod.fst) =o[atTop √óÀ¢ ly] (id ‚àò Prod.fst)
  rewrite [‚Üê isLittleO_map, map_fst_prod]
  exact isLittleO_const_id_atTop2 c

theorem isLittleO_const_snd_atTop [NoMaxOrder Œ±] [ClosedIciTopology Œ±] (c : F) (lx : Filter E) :
    (fun (_ : E √ó Œ±) ‚Ü¶ c) =o[lx √óÀ¢ atTop] Prod.snd := by
  refine lx.eq_or_neBot.casesOn (fun h ‚Ü¶ by simp [h]) (fun _ ‚Ü¶ ?_)
  show ((fun _ ‚Ü¶ c) ‚àò Prod.snd) =o[lx √óÀ¢ atTop] (id ‚àò Prod.snd)
  rewrite [‚Üê isLittleO_map, map_snd_prod]
  exact isLittleO_const_id_atTop2 c

end Order

section ContinuousOn

variable [TopologicalSpace Œπ] {C : Œπ ‚Üí E} {c : F}

section IsBigO

variable [SeminormedAddGroup E] [Norm F]

/-- A family of constant functions `f (i, x) = C i` is uniformly bounded w.r.t. `s` by
`‚®Ü i ‚àà s, ‚ÄñC i‚Äñ`, if `s` is compact and `C` is continuous. -/
theorem _root_.ContinuousOn.const_isBigOWithUniformlyOn_isCompact
    (hf : ContinuousOn C s) (hs : IsCompact s) (hc : ‚Äñc‚Äñ ‚â† 0) (l : Filter Œ±) :
    IsBigOWith (sSup (norm '' (C '' s)) / ‚Äñc‚Äñ) (ùìü s √óÀ¢ l)
    (fun (i, _x) ‚Ü¶ C i) fun _ => c := by
  refine isBigOWith_iff.mpr <| eventually_of_mem ?_ (fun x hx ‚Ü¶ ?_) (U := s √óÀ¢ Set.univ)
  ¬∑ exact prod_mem_prod (mem_principal_self s) univ_mem
  ¬∑ rw [div_mul_cancel‚ÇÄ _ hc]
    replace hs := hs.image_of_continuousOn hf |>.image continuous_norm
    have h_sSup := hs.isLUB_sSup <| Set.image_nonempty.mpr <| Set.image_nonempty.mpr ‚ü®x.1, hx.1‚ü©
    exact h_sSup.1 <| Set.mem_image_of_mem _ <| Set.mem_image_of_mem _ hx.1

/-- A family of constant functions `f (i, x) = C i` is uniformly O(1) w.r.t. `s`,
if `s` is compact and `C` is continuous. -/
theorem _root_.ContinuousOn.const_isBigOUniformlyOn_isCompact
    (hf : ContinuousOn C s) (hs : IsCompact s) (hc : ‚Äñc‚Äñ ‚â† 0) (l : Filter Œ±) :
    (fun (i, _x) ‚Ü¶ C i) =O[ùìü s √óÀ¢ l] fun _ => c :=
  (hf.const_isBigOWithUniformlyOn_isCompact hs hc l).isBigO

end IsBigO

section IsTheta

variable [NormedAddGroup E] [SeminormedAddGroup F]

/-- A family of constant functions `f (i, x) = C i` is uniformly bounded below w.r.t. `s` by
`‚äì i ‚àà s, ‚ÄñC i‚Äñ`, if `s` is compact and `C` is continuous. -/
theorem _root_.ContinuousOn.const_isBigOWithUniformlyOn_isCompact_rev
    (hf : ContinuousOn C s) (hs : IsCompact s) (hC : ‚àÄ i ‚àà s, C i ‚â† 0) (l : Filter Œ±) :
    IsBigOWith (‚Äñc‚Äñ / sInf (norm '' (C '' s))) (ùìü s √óÀ¢ l)
    (fun _ => c) fun (i, _x) ‚Ü¶ C i := by
  refine isBigOWith_iff.mpr <| eventually_of_mem ?_ (fun x hx ‚Ü¶ ?_) (U := s √óÀ¢ Set.univ)
  ¬∑ exact prod_mem_prod (mem_principal_self s) univ_mem
  ¬∑ rewrite [mul_comm_div]
    replace hs := hs.image_of_continuousOn hf |>.image continuous_norm
    have h_sInf := hs.isGLB_sInf <| Set.image_nonempty.mpr <| Set.image_nonempty.mpr ‚ü®x.1, hx.1‚ü©
    refine le_mul_of_one_le_right (norm_nonneg c) <| (one_le_div ?_).mpr <|
      h_sInf.1 <| Set.mem_image_of_mem _ <| Set.mem_image_of_mem _ hx.1
    obtain ‚ü®_, ‚ü®x, hx, hCx‚ü©, hnormCx‚ü© := hs.sInf_mem h_sInf.nonempty
    rewrite [‚Üê hnormCx, ‚Üê hCx]
    exact (norm_ne_zero_iff.mpr (hC x hx)).symm.lt_of_le (norm_nonneg _)

/-- A family of constant functions `f (i, x) = C i` is uniformly Œ©(1) w.r.t. `s`,
if `s` is compact and `C` is continuous with no zeros on `s`. -/
theorem _root_.ContinuousOn.const_isBigOUniformlyOn_isCompact_rev
    (hf : ContinuousOn C s) (hs : IsCompact s) (hC : ‚àÄ i ‚àà s, C i ‚â† 0) (l : Filter Œ±) :
    (fun _ => c) =O[ùìü s √óÀ¢ l] (fun (i, _x) ‚Ü¶ C i) :=
  (hf.const_isBigOWithUniformlyOn_isCompact_rev hs hC l).isBigO

/-- A family of constant functions `f (i, x) = C i` is uniformly Œò(1) w.r.t. `s`,
if `s` is compact and `C` is continuous with no zeros on `s`. -/
theorem _root_.ContinuousOn.const_isThetaUniformlyOn_isCompact (hf : ContinuousOn C s)
    (hs : IsCompact s) (hc : ‚Äñc‚Äñ ‚â† 0) (hC : ‚àÄ i ‚àà s, C i ‚â† 0) (l : Filter Œ±) :
    (fun (i, _x) ‚Ü¶ C i) =Œò[ùìü s √óÀ¢ l] fun _ => c :=
  ‚ü®hf.const_isBigOUniformlyOn_isCompact hs hc l, hf.const_isBigOUniformlyOn_isCompact_rev hs hC l‚ü©

end IsTheta

end ContinuousOn
