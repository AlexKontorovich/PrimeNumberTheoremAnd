import Mathlib.Analysis.Complex.CauchyIntegral
import Mathlib.Analysis.Complex.Convex

open Complex Set Topology

open scoped Interval

variable {z w : ‚ÑÇ} {c : ‚Ñù}

/-%%
This files gathers definitions and basic properties about rectangles.
%%-/

/-%%
\begin{definition}\label{Rectangle}\lean{Rectangle}\leanok
A Rectangle has corners $z$ and $w \in \C$.
\end{definition}
%%-/
/-- A `Rectangle` has corners `z` and `w`. -/
def Rectangle (z w : ‚ÑÇ) : Set ‚ÑÇ := [[z.re, w.re]] √ó‚ÑÇ [[z.im, w.im]]

namespace Rectangle

lemma symm : Rectangle z w = Rectangle w z := by
  simp [Rectangle, uIcc_comm]

lemma symm_re : Rectangle (w.re + z.im * I) (z.re + w.im * I) = Rectangle z w := by
  simp [Rectangle, uIcc_comm]

end Rectangle

/-%%
The border of a rectangle is the union of its four sides.
\begin{definition}[RectangleBorder]\label{RectangleBorder}\lean{RectangleBorder}\leanok
A Rectangle's border, given corners $z$ and $w$ is the union of the four sides.
\end{definition}
%%-/
/-- A `RectangleBorder` has corners `z` and `w`. -/
def RectangleBorder (z w : ‚ÑÇ) : Set ‚ÑÇ := [[z.re, w.re]] √ó‚ÑÇ {z.im} ‚à™ {z.re} √ó‚ÑÇ [[z.im, w.im]] ‚à™ [[z.re, w.re]] √ó‚ÑÇ {w.im} ‚à™ {w.re} √ó‚ÑÇ [[z.im, w.im]]

def Square (p : ‚ÑÇ) (c : ‚Ñù) : Set ‚ÑÇ := Rectangle (-c - c * I + p) (c + c * I + p)

lemma Square_apply (p : ‚ÑÇ) (cpos : c > 0) :
    Square p c = Icc (-c + p.re) (c + p.re) √ó‚ÑÇ Icc (-c + p.im) (c + p.im) := by
  rw [Square, Rectangle, uIcc_of_le (by simp; linarith), uIcc_of_le (by simp; linarith)]
  simp

-- From PR #9598
/-- The preimage under `equivRealProd` of `s √óÀ¢ t` is `s √ó‚ÑÇ t`. -/
lemma preimage_equivRealProd_prod (s t : Set ‚Ñù) : equivRealProd ‚Åª¬π' (s √óÀ¢ t) = s √ó‚ÑÇ t := rfl

@[simp]
theorem preimage_equivRealProdCLM_reProdIm (s t : Set ‚Ñù) :
    equivRealProdCLM.symm ‚Åª¬π' (s √ó‚ÑÇ t) = s √óÀ¢ t :=
  rfl

@[simp]
theorem ContinuousLinearEquiv.coe_toLinearEquiv_symm {R : Type*} {S : Type*} [Semiring R] [Semiring S] {œÉ : R ‚Üí+* S}
    {œÉ' : S ‚Üí+* R} [RingHomInvPair œÉ œÉ'] [RingHomInvPair œÉ' œÉ] (M : Type*) [TopologicalSpace M]
    [AddCommMonoid M] {M‚ÇÇ : Type*} [TopologicalSpace M‚ÇÇ] [AddCommMonoid M‚ÇÇ] [Module R M]
    [Module S M‚ÇÇ] (e : M ‚âÉSL[œÉ] M‚ÇÇ) :
    ‚áëe.toLinearEquiv.symm = e.symm :=
  rfl

-- From PR #9598
/-- The inequality `s √ó t ‚äÜ s‚ÇÅ √ó t‚ÇÅ` holds in `‚ÑÇ` iff it holds in `‚Ñù √ó ‚Ñù`. -/
lemma reProdIm_subset_iff {s s‚ÇÅ t t‚ÇÅ : Set ‚Ñù} : s √ó‚ÑÇ t ‚äÜ s‚ÇÅ √ó‚ÑÇ t‚ÇÅ ‚Üî s √óÀ¢ t ‚äÜ s‚ÇÅ √óÀ¢ t‚ÇÅ := by
  simp_rw [‚Üê preimage_equivRealProd_prod, equivRealProd.preimage_subset]

-- From PR #9598
/-- If `s ‚äÜ s‚ÇÅ ‚äÜ ‚Ñù` and `t ‚äÜ t‚ÇÅ ‚äÜ ‚Ñù`, then `s √ó t ‚äÜ s‚ÇÅ √ó t‚ÇÅ` in `‚ÑÇ`. -/
lemma reProdIm_subset_iff' {s s‚ÇÅ t t‚ÇÅ : Set ‚Ñù} :
    s √ó‚ÑÇ t ‚äÜ s‚ÇÅ √ó‚ÑÇ t‚ÇÅ ‚Üî s ‚äÜ s‚ÇÅ ‚àß t ‚äÜ t‚ÇÅ ‚à® s = ‚àÖ ‚à® t = ‚àÖ :=
  reProdIm_subset_iff.trans prod_subset_prod_iff

/-- The axis-parallel complex rectangle with opposite corners `z` and `w` is complex product
  of two intervals, which is also the convex hull of the four corners. Golfed from mathlib4\#9598.-/
lemma segment_reProdIm_segment_eq_convexHull (z w : ‚ÑÇ) :
    [[z.re, w.re]] √ó‚ÑÇ [[z.im, w.im]] = convexHull ‚Ñù {z, z.re + w.im * I, w.re + z.im * I, w} := by
  simp_rw [‚Üê segment_eq_uIcc, ‚Üê convexHull_pair, ‚Üê convexHull_reProdIm, reProdIm]
  exact congrArg _ <| Set.ext <| by simpa [Complex.ext_iff] using by tauto

/-- If the four corners of a rectangle are contained in a convex set `U`, then the whole
  rectangle is. Golfed from mathlib4\#9598.-/
lemma rectangle_in_convex {U : Set ‚ÑÇ} (U_convex : Convex ‚Ñù U) {z w : ‚ÑÇ} (hz : z ‚àà U)
    (hw : w ‚àà U) (hzw : (z.re + w.im * I) ‚àà U) (hwz : (w.re + z.im * I) ‚àà U) :
    Rectangle z w ‚äÜ U := by
  rw [Rectangle, segment_reProdIm_segment_eq_convexHull]
  exact convexHull_min (by simp_all [insert_subset_iff]) U_convex

lemma mem_Rect {z w : ‚ÑÇ} (zRe_lt_wRe : z.re ‚â§ w.re) (zIm_lt_wIm : z.im ‚â§ w.im) (p : ‚ÑÇ) :
    p ‚àà Rectangle z w ‚Üî z.re ‚â§ p.re ‚àß p.re ‚â§ w.re ‚àß z.im ‚â§ p.im ‚àß p.im ‚â§ w.im := by
  rw [Rectangle, uIcc_of_le zRe_lt_wRe, uIcc_of_le zIm_lt_wIm]
  exact and_assoc

lemma square_neg (p : ‚ÑÇ) (c : ‚Ñù) : Square p (-c) = Square p c := by
  simpa [Square] using Rectangle.symm

def Set.uIoo {Œ± : Type*} [Lattice Œ±] (a b : Œ±) : Set Œ± := Ioo (a ‚äì b) (a ‚äî b)

@[simp]
theorem uIoo_of_le {Œ± : Type*} [Lattice Œ±] {a b : Œ±} (h : a ‚â§ b) : Set.uIoo a b = Ioo a b := by
  rw [uIoo, inf_eq_left.2 h, sup_eq_right.2 h]

theorem Set.left_not_mem_uIoo {a b : ‚Ñù} : a ‚àâ Set.uIoo a b :=
  fun ‚ü®h1, h2‚ü© ‚Ü¶ (left_lt_sup.mp h2) (le_of_not_le (inf_lt_left.mp h1))

theorem Set.right_not_mem_uIoo {a b : ‚Ñù} : b ‚àâ Set.uIoo a b :=
  fun ‚ü®h1, h2‚ü© ‚Ü¶ (right_lt_sup.mp h2) (le_of_not_le (inf_lt_right.mp h1))

theorem Set.ne_left_of_mem_uIoo {a b c : ‚Ñù} (hc : c ‚àà Set.uIoo a b) : c ‚â† a :=
  fun h ‚Ü¶ Set.left_not_mem_uIoo (h ‚ñ∏ hc)

theorem Set.ne_right_of_mem_uIoo {a b c : ‚Ñù} (hc : c ‚àà Set.uIoo a b) : c ‚â† b :=
  fun h ‚Ü¶ Set.right_not_mem_uIoo (h ‚ñ∏ hc)

lemma left_mem_rect (z w : ‚ÑÇ) : z ‚àà Rectangle z w := ‚ü®left_mem_uIcc, left_mem_uIcc‚ü©

lemma right_mem_rect (z w : ‚ÑÇ) : w ‚àà Rectangle z w := ‚ü®right_mem_uIcc, right_mem_uIcc‚ü©

lemma rect_subset_iff {z w z' w' : ‚ÑÇ} :
    Rectangle z' w' ‚äÜ Rectangle z w ‚Üî z' ‚àà Rectangle z w ‚àß w' ‚àà Rectangle z w := by
  use fun h ‚Ü¶ ‚ü®h (left_mem_rect z' w'), h (right_mem_rect z' w')‚ü©
  intro ‚ü®‚ü®‚ü®hz're_ge, hz're_le‚ü©, ‚ü®hz'im_ge, hz'im_le‚ü©‚ü©,
    ‚ü®‚ü®hw're_ge, hw're_le‚ü©, ‚ü®hw'im_ge, hw'im_le‚ü©‚ü©‚ü© x ‚ü®‚ü®hxre_ge, hxre_le‚ü©, ‚ü®hxim_ge, hxim_le‚ü©‚ü©
  refine ‚ü®‚ü®?_, ?_‚ü©, ‚ü®?_, ?_‚ü©‚ü©
  ¬∑ exact (le_inf hz're_ge hw're_ge).trans hxre_ge
  ¬∑ exact (le_sup_iff.mp hxre_le).casesOn (fun h ‚Ü¶ h.trans hz're_le) (fun h ‚Ü¶ h.trans hw're_le)
  ¬∑ exact (le_inf hz'im_ge hw'im_ge).trans hxim_ge
  ¬∑ exact (le_sup_iff.mp hxim_le).casesOn (fun h ‚Ü¶ h.trans hz'im_le) (fun h ‚Ü¶ h.trans hw'im_le)

lemma RectSubRect {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ y‚ÇÄ y‚ÇÅ y‚ÇÇ y‚ÇÉ : ‚Ñù} (x‚ÇÄ_le_x‚ÇÅ : x‚ÇÄ ‚â§ x‚ÇÅ) (x‚ÇÅ_le_x‚ÇÇ : x‚ÇÅ ‚â§ x‚ÇÇ)
    (x‚ÇÇ_le_x‚ÇÉ : x‚ÇÇ ‚â§ x‚ÇÉ) (y‚ÇÄ_le_y‚ÇÅ : y‚ÇÄ ‚â§ y‚ÇÅ) (y‚ÇÅ_le_y‚ÇÇ : y‚ÇÅ ‚â§ y‚ÇÇ) (y‚ÇÇ_le_y‚ÇÉ : y‚ÇÇ ‚â§ y‚ÇÉ) :
    Rectangle (x‚ÇÅ + y‚ÇÅ * I) (x‚ÇÇ + y‚ÇÇ * I) ‚äÜ Rectangle (x‚ÇÄ + y‚ÇÄ * I) (x‚ÇÉ + y‚ÇÉ * I) := by
  rw [rect_subset_iff, mem_Rect, mem_Rect]
  refine ‚ü®‚ü®?_, ?_, ?_, ?_‚ü©, ?_, ?_, ?_, ?_‚ü©
  all_goals simpa using by linarith

lemma RectSubRect' {z‚ÇÄ z‚ÇÅ z‚ÇÇ z‚ÇÉ : ‚ÑÇ} (x‚ÇÄ_le_x‚ÇÅ : z‚ÇÄ.re ‚â§ z‚ÇÅ.re) (x‚ÇÅ_le_x‚ÇÇ : z‚ÇÅ.re ‚â§ z‚ÇÇ.re)
    (x‚ÇÇ_le_x‚ÇÉ : z‚ÇÇ.re ‚â§ z‚ÇÉ.re) (y‚ÇÄ_le_y‚ÇÅ : z‚ÇÄ.im ‚â§ z‚ÇÅ.im) (y‚ÇÅ_le_y‚ÇÇ : z‚ÇÅ.im ‚â§ z‚ÇÇ.im)
    (y‚ÇÇ_le_y‚ÇÉ : z‚ÇÇ.im ‚â§ z‚ÇÉ.im) :
    Rectangle z‚ÇÅ z‚ÇÇ ‚äÜ Rectangle z‚ÇÄ z‚ÇÉ := by
  rw [‚Üê re_add_im z‚ÇÄ, ‚Üê re_add_im z‚ÇÅ, ‚Üê re_add_im z‚ÇÇ, ‚Üê re_add_im z‚ÇÉ]
  exact RectSubRect x‚ÇÄ_le_x‚ÇÅ x‚ÇÅ_le_x‚ÇÇ x‚ÇÇ_le_x‚ÇÉ y‚ÇÄ_le_y‚ÇÅ y‚ÇÅ_le_y‚ÇÇ y‚ÇÇ_le_y‚ÇÉ

lemma rectangleBorder_subset_rectangle (z w : ‚ÑÇ) : RectangleBorder z w ‚äÜ Rectangle z w := by
  intro x hx
  obtain ‚ü®‚ü®h | h‚ü© | h‚ü© | h := hx
  ¬∑ exact ‚ü®h.1, h.2 ‚ñ∏ left_mem_uIcc‚ü©
  ¬∑ exact ‚ü®h.1 ‚ñ∏ left_mem_uIcc, h.2‚ü©
  ¬∑ exact ‚ü®h.1, h.2 ‚ñ∏ right_mem_uIcc‚ü©
  ¬∑ exact ‚ü®h.1 ‚ñ∏ right_mem_uIcc, h.2‚ü©

/-- Note: try using `by simp` for `h`. -/
lemma rectangle_disjoint_singleton {z w p : ‚ÑÇ}
    (h : (p.re < z.re ‚àß p.re < w.re) ‚à® (p.im < z.im ‚àß p.im < w.im) ‚à®
      (z.re < p.re ‚àß w.re < p.re) ‚à® (z.im < p.im ‚àß w.im < p.im)) :
    Disjoint (Rectangle z w) {p} := by
  refine disjoint_singleton_right.mpr (not_and_or.mpr ?_)
  obtain h | h | h | h := h
  ¬∑ exact Or.inl (not_mem_uIcc_of_lt h.1 h.2)
  ¬∑ exact Or.inr (not_mem_uIcc_of_lt h.1 h.2)
  ¬∑ exact Or.inl (not_mem_uIcc_of_gt h.1 h.2)
  ¬∑ exact Or.inr (not_mem_uIcc_of_gt h.1 h.2)

lemma rectangleBorder_disjoint_singleton {z w p : ‚ÑÇ}
    (h : p.re ‚â† z.re ‚àß p.re ‚â† w.re ‚àß p.im ‚â† z.im ‚àß p.im ‚â† w.im) :
    Disjoint (RectangleBorder z w) {p} := by
  refine disjoint_singleton_right.mpr ?_
  simp_rw [RectangleBorder, Set.mem_union, not_or]
  exact ‚ü®‚ü®‚ü®fun hc ‚Ü¶ h.2.2.1 hc.2, fun hc ‚Ü¶ h.1 hc.1‚ü©, fun hc ‚Ü¶ h.2.2.2 hc.2‚ü©, fun hc ‚Ü¶ h.2.1 hc.1‚ü©

lemma rectangle_subset_punctured_rect {z‚ÇÄ z‚ÇÅ z‚ÇÇ z‚ÇÉ p : ‚ÑÇ}
    (hz : z‚ÇÄ.re ‚â§ z‚ÇÅ.re ‚àß z‚ÇÅ.re ‚â§ z‚ÇÇ.re ‚àß z‚ÇÇ.re ‚â§ z‚ÇÉ.re ‚àß
      z‚ÇÄ.im ‚â§ z‚ÇÅ.im ‚àß z‚ÇÅ.im ‚â§ z‚ÇÇ.im ‚àß z‚ÇÇ.im ‚â§ z‚ÇÉ.im)
    (hp : (p.re < z‚ÇÅ.re ‚àß p.re < z‚ÇÇ.re) ‚à® (p.im < z‚ÇÅ.im ‚àß p.im < z‚ÇÇ.im) ‚à®
      (z‚ÇÅ.re < p.re ‚àß z‚ÇÇ.re < p.re) ‚à® (z‚ÇÅ.im < p.im ‚àß z‚ÇÇ.im < p.im)) :
    Rectangle z‚ÇÅ z‚ÇÇ ‚äÜ Rectangle z‚ÇÄ z‚ÇÉ \ {p} :=
  Set.subset_diff.mpr ‚ü®by apply RectSubRect' <;> tauto, rectangle_disjoint_singleton hp‚ü©

lemma rectangleBorder_subset_punctured_rect {z‚ÇÄ z‚ÇÅ z‚ÇÇ z‚ÇÉ p : ‚ÑÇ}
    (hz : z‚ÇÄ.re ‚â§ z‚ÇÅ.re ‚àß z‚ÇÅ.re ‚â§ z‚ÇÇ.re ‚àß z‚ÇÇ.re ‚â§ z‚ÇÉ.re ‚àß
      z‚ÇÄ.im ‚â§ z‚ÇÅ.im ‚àß z‚ÇÅ.im ‚â§ z‚ÇÇ.im ‚àß z‚ÇÇ.im ‚â§ z‚ÇÉ.im)
    (hp : p.re ‚â† z‚ÇÅ.re ‚àß p.re ‚â† z‚ÇÇ.re ‚àß p.im ‚â† z‚ÇÅ.im ‚àß p.im ‚â† z‚ÇÇ.im) :
    RectangleBorder z‚ÇÅ z‚ÇÇ ‚äÜ Rectangle z‚ÇÄ z‚ÇÉ \ {p} :=
  Set.subset_diff.mpr ‚ü®
    (rectangleBorder_subset_rectangle _ _).trans (by apply RectSubRect' <;> tauto),
    rectangleBorder_disjoint_singleton hp‚ü©

lemma rectangle_mem_nhds_iff {z w p : ‚ÑÇ} : Rectangle z w ‚àà ùìù p ‚Üî
    p ‚àà (Set.uIoo z.re w.re) √ó‚ÑÇ (Set.uIoo z.im w.im) := by
  simp_rw [‚Üê mem_interior_iff_mem_nhds, Rectangle, Complex.interior_reProdIm, uIoo, uIcc, interior_Icc]

/-- A real segment `[a‚ÇÅ, a‚ÇÇ]` translated by `b * I` is the complex line segment.
Golfed from mathlib\#9598.-/
lemma horizontalSegment_eq (a‚ÇÅ a‚ÇÇ b : ‚Ñù) :
    (fun (x : ‚Ñù) ‚Ü¶ x + b * I) '' [[a‚ÇÅ, a‚ÇÇ]] = [[a‚ÇÅ, a‚ÇÇ]] √ó‚ÑÇ {b} :=
  Set.ext fun _ => ‚ü®fun hx ‚Ü¶ hx.casesOn fun _ ‚ü®_, hx‚ü© ‚Ü¶ by simpa [‚Üê hx, reProdIm],
    fun hx ‚Ü¶ hx.casesOn (by simp_all [Complex.ext_iff])‚ü©

/-- A vertical segment `[b‚ÇÅ, b‚ÇÇ]` translated by `a` is the complex line segment.
Golfed from mathlib\#9598.-/
lemma verticalSegment_eq (a b‚ÇÅ b‚ÇÇ : ‚Ñù) :
    (fun (y : ‚Ñù) ‚Ü¶ a + y * I) '' [[b‚ÇÅ, b‚ÇÇ]] = {a} √ó‚ÑÇ [[b‚ÇÅ, b‚ÇÇ]] :=
  Set.ext fun _ => ‚ü®fun hx ‚Ü¶ hx.casesOn fun _ ‚ü®_, hx‚ü© ‚Ü¶ by simpa [‚Üê hx, reProdIm],
    fun hx ‚Ü¶ hx.casesOn (by simp_all [Complex.ext_iff])‚ü©

lemma mapsTo_rectangle_left_re (z w : ‚ÑÇ) :
    MapsTo (fun (y : ‚Ñù) => ‚Üëz.re + ‚Üëy * I) [[z.im, w.im]] (Rectangle z w) :=
  fun _ hx ‚Ü¶ ‚ü®by simp, by simp [hx]‚ü©

lemma mapsTo_rectangle_right_re (z w : ‚ÑÇ) :
    MapsTo (fun (y : ‚Ñù) => ‚Üëw.re + ‚Üëy * I) [[z.im, w.im]] (Rectangle z w) :=
  fun _ hx ‚Ü¶ ‚ü®by simp, by simp [hx]‚ü©

lemma mapsTo_rectangle_left_im (z w : ‚ÑÇ) :
    MapsTo (fun (x : ‚Ñù) => ‚Üëx + z.im * I) [[z.re, w.re]] (Rectangle z w) :=
  fun _ hx ‚Ü¶ ‚ü®by simp [hx], by simp‚ü©

lemma mapsTo_rectangle_right_im (z w : ‚ÑÇ) :
    MapsTo (fun (x : ‚Ñù) => ‚Üëx + w.im * I) [[z.re, w.re]] (Rectangle z w) :=
  fun _ hx ‚Ü¶ ‚ü®by simp [hx], by simp‚ü©

lemma mapsTo_rectangleBorder_left_re (z w : ‚ÑÇ) :
    MapsTo (fun (y : ‚Ñù) => ‚Üëz.re + ‚Üëy * I) [[z.im, w.im]] (RectangleBorder z w) :=
  (Set.mapsTo_image _ _).mono subset_rfl fun _ ‚Ü¶ by simp_all [verticalSegment_eq, RectangleBorder]

lemma mapsTo_rectangleBorder_right_re (z w : ‚ÑÇ) :
    MapsTo (fun (y : ‚Ñù) => ‚Üëw.re + ‚Üëy * I) [[z.im, w.im]] (RectangleBorder z w) :=
  (Set.mapsTo_image _ _).mono subset_rfl fun _ ‚Ü¶ by simp_all [verticalSegment_eq, RectangleBorder]

lemma mapsTo_rectangleBorder_left_im (z w : ‚ÑÇ) :
    MapsTo (fun (x : ‚Ñù) => ‚Üëx + z.im * I) [[z.re, w.re]] (RectangleBorder z w) :=
  (Set.mapsTo_image _ _).mono subset_rfl fun _ ‚Ü¶ by simp_all [horizontalSegment_eq, RectangleBorder]

lemma mapsTo_rectangleBorder_right_im (z w : ‚ÑÇ) :
    MapsTo (fun (x : ‚Ñù) => ‚Üëx + w.im * I) [[z.re, w.re]] (RectangleBorder z w) :=
  (Set.mapsTo_image _ _).mono subset_rfl fun _ ‚Ü¶ by simp_all [horizontalSegment_eq, RectangleBorder]

lemma mapsTo_rectangle_left_re_NoP (z w : ‚ÑÇ) {p : ‚ÑÇ} (pNotOnBorder : p ‚àâ RectangleBorder z w) :
    MapsTo (fun (y : ‚Ñù) => ‚Üëz.re + ‚Üëy * I) [[z.im, w.im]] (Rectangle z w \ {p}) := by
  refine (mapsTo_rectangleBorder_left_re z w).mono_right (Set.subset_diff.mpr ?_)
  exact ‚ü®rectangleBorder_subset_rectangle z w, disjoint_singleton_right.mpr pNotOnBorder‚ü©

lemma mapsTo_rectangle_right_re_NoP (z w : ‚ÑÇ) {p : ‚ÑÇ} (pNotOnBorder : p ‚àâ RectangleBorder z w) :
    MapsTo (fun (y : ‚Ñù) => ‚Üëw.re + ‚Üëy * I) [[z.im, w.im]] (Rectangle z w \ {p}) := by
  refine (mapsTo_rectangleBorder_right_re z w).mono_right (Set.subset_diff.mpr ?_)
  exact ‚ü®rectangleBorder_subset_rectangle z w, disjoint_singleton_right.mpr pNotOnBorder‚ü©

lemma mapsTo_rectangle_left_im_NoP (z w : ‚ÑÇ) {p : ‚ÑÇ} (pNotOnBorder : p ‚àâ RectangleBorder z w) :
    MapsTo (fun (x : ‚Ñù) => ‚Üëx + z.im * I) [[z.re, w.re]] (Rectangle z w \ {p}) := by
  refine (mapsTo_rectangleBorder_left_im z w).mono_right (Set.subset_diff.mpr ?_)
  exact ‚ü®rectangleBorder_subset_rectangle z w, disjoint_singleton_right.mpr pNotOnBorder‚ü©

lemma mapsTo_rectangle_right_im_NoP (z w : ‚ÑÇ) {p : ‚ÑÇ} (pNotOnBorder : p ‚àâ RectangleBorder z w) :
    MapsTo (fun (x : ‚Ñù) => ‚Üëx + w.im * I) [[z.re, w.re]] (Rectangle z w \ {p}) := by
  refine (mapsTo_rectangleBorder_right_im z w).mono_right (Set.subset_diff.mpr ?_)
  exact ‚ü®rectangleBorder_subset_rectangle z w, disjoint_singleton_right.mpr pNotOnBorder‚ü©

theorem not_mem_rectangleBorder_of_rectangle_mem_nhds {z w p : ‚ÑÇ} (hp : Rectangle z w ‚àà ùìù p) :
    p ‚àâ RectangleBorder z w := by
  refine Set.disjoint_right.mp (rectangleBorder_disjoint_singleton ?_) rfl
  have h1 := rectangle_mem_nhds_iff.mp hp
  exact ‚ü®Set.ne_left_of_mem_uIoo h1.1, Set.ne_right_of_mem_uIoo h1.1,
    Set.ne_left_of_mem_uIoo h1.2, Set.ne_right_of_mem_uIoo h1.2‚ü©

theorem Complex.nhds_hasBasis_square (p : ‚ÑÇ) : (ùìù p).HasBasis (0 < ¬∑) (Square p ¬∑) := by
  suffices (ùìù p.re √óÀ¢ ùìù p.im).HasBasis (0 < ¬∑) (equivRealProdCLM.symm.toHomeomorph ‚Åª¬π' Square p ¬∑)
    by simpa only [‚Üê nhds_prod_eq, Homeomorph.map_nhds_eq, Homeomorph.image_preimage]
      using this.map equivRealProdCLM.symm.toHomeomorph
  apply ((nhds_basis_Icc_pos p.re).prod_same_index_mono (nhds_basis_Icc_pos p.im) ?_ ?_).congr
  ¬∑ intro; rfl
  ¬∑ intros
    rw [‚Üê uIcc_of_lt (by linarith), ‚Üê uIcc_of_lt (by linarith)]
    simpa [Square, Rectangle] using by ring_nf
  all_goals exact (antitone_const_tsub.Icc (monotone_id.const_add _)).monotoneOn _

lemma square_mem_nhds (p : ‚ÑÇ) {c : ‚Ñù} (hc : c ‚â† 0) :
    Square p c ‚àà ùìù p := by
  wlog hc_pos : 0 < c generalizing c with h
  ¬∑ rw [‚Üê square_neg]
    exact h (neg_ne_zero.mpr hc) <| neg_pos.mpr <| hc.lt_of_le <| not_lt.mp hc_pos
  exact (nhds_hasBasis_square p).mem_of_mem hc_pos

lemma square_subset_square {p : ‚ÑÇ} {c‚ÇÅ c‚ÇÇ : ‚Ñù} (hc‚ÇÅ : 0 < c‚ÇÅ) (hc : c‚ÇÅ ‚â§ c‚ÇÇ) :
    Square p c‚ÇÅ ‚äÜ Square p c‚ÇÇ := by
  apply RectSubRect' <;> simpa using by linarith

lemma SmallSquareInRectangle {z w p : ‚ÑÇ} (pInRectInterior : Rectangle z w ‚àà nhds p) :
    ‚àÄ·∂† (c : ‚Ñù) in ùìù[>]0, Square p c ‚äÜ Rectangle z w := by
  obtain ‚ü®Œµ, hŒµ0, hŒµ‚ü© := ((Complex.nhds_hasBasis_square p).1 _).mp pInRectInterior
  filter_upwards [Ioo_mem_nhdsWithin_Ioi' (hŒµ0)] with _ ‚ü®hŒµ'0, hŒµ'‚ü©
  exact subset_trans (square_subset_square hŒµ'0 hŒµ'.le) hŒµ
