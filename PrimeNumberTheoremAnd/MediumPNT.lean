import PrimeNumberTheoremAnd.ZetaBounds
import Mathlib.Algebra.Group.Support

set_option lang.lemmaCmd true

open Set Function Filter Complex Real

open ArithmeticFunction (vonMangoldt)

/-%%
The approach here is completely standard. We follow the use of
$\mathcal{M}(\widetilde{1_{\epsilon}})$ as in [Kontorovich 2015].
%%-/

local notation (name := mellintransform2) "ùìú" => MellinTransform

local notation "Œõ" => vonMangoldt

local notation "Œ∂" => riemannZeta

local notation "Œ∂'" => deriv Œ∂

/-%%
\begin{definition}\label{ChebyshevPsi}\lean{ChebyshevPsi}\leanok
The (second) Chebyshev Psi function is defined as
$$
\psi(x) := \sum_{n \le x} \Lambda(n),
$$
where $\Lambda(n)$ is the von Mangoldt function.
\end{definition}
%%-/
noncomputable def ChebyshevPsi (x : ‚Ñù) : ‚Ñù :=
  (Finset.range ‚åäx + 1‚åã‚Çä).sum Œõ

local notation "œà" => ChebyshevPsi

/-%%
It has already been established that zeta doesn't vanish on the 1 line, and has a pole at $s=1$
of order 1.
We also have the following.
\begin{theorem}[LogDerivativeDirichlet]\label{LogDerivativeDirichlet}\lean{LogDerivativeDirichlet}\leanok
We have that, for $\Re(s)>1$,
$$
-\frac{\zeta'(s)}{\zeta(s)} = \sum_{n=1}^\infty \frac{\Lambda(n)}{n^s}.
$$
\end{theorem}
%%-/
theorem LogDerivativeDirichlet (s : ‚ÑÇ) (hs : 1 < s.re) :
    - deriv riemannZeta s / riemannZeta s = ‚àë' n, Œõ n / (n : ‚ÑÇ) ^ s := by
  rw [‚Üê ArithmeticFunction.LSeries_vonMangoldt_eq_deriv_riemannZeta_div hs]
  dsimp [LSeries, LSeries.term]
  nth_rewrite 2 [Summable.tsum_eq_add_tsum_ite (b := 0) ?_]
  ¬∑ simp
  ¬∑ have := ArithmeticFunction.LSeriesSummable_vonMangoldt hs
    dsimp [LSeriesSummable] at this
    convert this; rename ‚Ñï => n
    by_cases h : n = 0 <;> simp [LSeries.term, h]
/-%%
\begin{proof}\leanok
Already in Mathlib.
\end{proof}


The main object of study is the following inverse Mellin-type transform, which will turn out to
be a smoothed Chebyshev function.

\begin{definition}[SmoothedChebyshev]\label{SmoothedChebyshev}\lean{SmoothedChebyshev}\leanok
Fix $\epsilon>0$, and a bumpfunction supported in $[1/2,2]$. Then we define the smoothed
Chebyshev function $\psi_{\epsilon}$ from $\mathbb{R}_{>0}$ to $\mathbb{C}$ by
$$\psi_{\epsilon}(X) = \frac{1}{2\pi i}\int_{(\sigma)}\frac{-\zeta'(s)}{\zeta(s)}
\mathcal{M}(\widetilde{1_{\epsilon}})(s)
X^{s}ds,$$
where we'll take $\sigma = 1 + 1 / \log X$.
\end{definition}
%%-/
noncomputable abbrev SmoothedChebyshevIntegrand (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ : ‚Ñù) (X : ‚Ñù) : ‚ÑÇ ‚Üí ‚ÑÇ :=
  fun s ‚Ü¶ (- deriv riemannZeta s) / riemannZeta s *
    ùìú ((Smooth1 SmoothingF Œµ) ¬∑) s * (X : ‚ÑÇ) ^ s

noncomputable def SmoothedChebyshev (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ : ‚Ñù) (X : ‚Ñù) : ‚ÑÇ :=
  VerticalIntegral' (SmoothedChebyshevIntegrand SmoothingF Œµ X) ((1 : ‚Ñù) + (Real.log X)‚Åª¬π)

open MeasureTheory

/-%%
\begin{lemma}[SmoothedChebyshevDirichlet_aux_integrable]\label{SmoothedChebyshevDirichlet_aux_integrable}\lean{SmoothedChebyshevDirichlet_aux_integrable}\leanok
Fix a nonnegative, continuously differentiable function $F$ on $\mathbb{R}$ with support in $[1/2,2]$, and total mass one, $\int_{(0,\infty)} F(x)/x dx = 1$. Then for any $\epsilon>0$, and $\sigma\in (1, 2]$, the function
$$
x \mapsto\mathcal{M}(\widetilde{1_{\epsilon}})(\sigma + ix)
$$
is integrable on $\mathbb{R}$.
\end{lemma}
%%-/
lemma SmoothedChebyshevDirichlet_aux_integrable {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (diffSmoothingF : ContDiff ‚Ñù 1 SmoothingF)
    (SmoothingFpos : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (suppSmoothingF : support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (mass_one : ‚à´ (x : ‚Ñù) in Ioi 0, SmoothingF x / x = 1)
    {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) (Œµ_lt_one : Œµ < 1) {œÉ : ‚Ñù} (œÉ_gt : 1 < œÉ) (œÉ_le : œÉ ‚â§ 2) :
    MeasureTheory.Integrable
      (fun (y : ‚Ñù) ‚Ü¶ ùìú (fun x ‚Ü¶ (Smooth1 SmoothingF Œµ x : ‚ÑÇ)) (œÉ + y * I)) := by
  obtain ‚ü®c, cpos, hc‚ü© := MellinOfSmooth1b diffSmoothingF suppSmoothingF
  apply Integrable.mono' (g := (fun t ‚Ü¶ c / Œµ * 1 / (1 + t ^ 2)))
  ¬∑ apply Integrable.const_mul integrable_inv_one_add_sq
  ¬∑ apply Continuous.aestronglyMeasurable
    apply continuous_iff_continuousAt.mpr
    intro x
    have := Smooth1MellinDifferentiable diffSmoothingF suppSmoothingF ‚ü®Œµpos, Œµ_lt_one‚ü©
      SmoothingFpos mass_one (s := œÉ + x * I) (by simp only [add_re, ofReal_re, mul_re, I_re,
        mul_zero, ofReal_im, I_im, mul_one, sub_self, add_zero]; linarith) |>.continuousAt
    fun_prop
  ¬∑ filter_upwards [] with t
    calc
      _‚â§ c / Œµ * 1 / (œÉ^2 + t^2) := by
        convert hc (œÉ / 2) (by linarith) (œÉ + t * I) (by simp only [add_re, ofReal_re, mul_re,
          I_re, mul_zero, ofReal_im, I_im, mul_one, sub_self, add_zero, half_le_self_iff]; linarith)
          (by simp only [add_re, ofReal_re, mul_re, I_re, mul_zero, ofReal_im, I_im, mul_one,
            sub_self, add_zero]; linarith) Œµ Œµpos  Œµ_lt_one using 1
        simp only [mul_one, Complex.sq_norm, normSq_apply, add_re, ofReal_re, mul_re, I_re,
          mul_zero, ofReal_im, I_im, sub_self, add_zero, add_im, mul_im, zero_add, mul_inv_rev]
        ring_nf
      _ ‚â§ _ := by
        gcongr; nlinarith

/-%%
\begin{proof}\leanok
\uses{MellinOfSmooth1b}
By Lemma \ref{MellinOfSmooth1b} the integrand is $O(1/t^2)$ as $t\rightarrow \infty$ and hence the function is integrable.
\end{proof}
%%-/

/-%%
\begin{lemma}[SmoothedChebyshevDirichlet_aux_tsum_integral]\label{SmoothedChebyshevDirichlet_aux_tsum_integral}
\lean{SmoothedChebyshevDirichlet_aux_tsum_integral}\leanok
Fix a nonnegative, continuously differentiable function $F$ on $\mathbb{R}$ with support in
$[1/2,2]$, and total mass one, $\int_{(0,\infty)} F(x)/x dx = 1$. Then for any $\epsilon>0$ and $\sigma\in(1,2]$, the
function
$x \mapsto \sum_{n=1}^\infty \frac{\Lambda(n)}{n^{\sigma+it}}
\mathcal{M}(\widetilde{1_{\epsilon}})(\sigma+it) x^{\sigma+it}$ is equal to
$\sum_{n=1}^\infty \int_{(0,\infty)} \frac{\Lambda(n)}{n^{\sigma+it}}
\mathcal{M}(\widetilde{1_{\epsilon}})(\sigma+it) x^{\sigma+it}$.
\end{lemma}
%%-/

-- TODO: add to mathlib
attribute [fun_prop] Continuous.const_cpow

lemma SmoothedChebyshevDirichlet_aux_tsum_integral {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (diffSmoothingF : ContDiff ‚Ñù 1 SmoothingF)
    (SmoothingFpos : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (suppSmoothingF : support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (mass_one : ‚à´ (x : ‚Ñù) in Ioi 0, SmoothingF x / x = 1) {X : ‚Ñù}
    (X_pos : 0 < X) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ)
    (Œµ_lt_one : Œµ < 1) {œÉ : ‚Ñù} (œÉ_gt : 1 < œÉ) (œÉ_le : œÉ ‚â§ 2) :
    ‚à´ (t : ‚Ñù),
      ‚àë' (n : ‚Ñï), (ArithmeticFunction.vonMangoldt n) / (n : ‚ÑÇ) ^ (œÉ + t * I) *
        ùìú (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) (œÉ + t * I) * (X : ‚ÑÇ) ^ (œÉ + t * I) =
    ‚àë' (n : ‚Ñï),
      ‚à´ (t : ‚Ñù), (ArithmeticFunction.vonMangoldt n) / (n : ‚ÑÇ) ^ (œÉ + ‚Üët * I) *
        ùìú (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) (œÉ + ‚Üët * I) * (X : ‚ÑÇ) ^ (œÉ + t * I) := by

  have cont_mellin_smooth : Continuous fun (a : ‚Ñù) ‚Ü¶
      ùìú (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) (œÉ + ‚Üëa * I) := by
    rw [continuous_iff_continuousOn_univ]
    refine ContinuousOn.comp' ?_ ?_ ?_ (t := {z : ‚ÑÇ | 0 < z.re })
    . refine continuousOn_of_forall_continuousAt ?_
      intro z hz
      exact (Smooth1MellinDifferentiable diffSmoothingF suppSmoothingF ‚ü®Œµpos, Œµ_lt_one‚ü© SmoothingFpos mass_one hz).continuousAt
    . fun_prop
    . simp only [mapsTo_univ_iff, mem_setOf_eq, add_re, ofReal_re, mul_re, I_re, mul_zero,
        ofReal_im, I_im, mul_one, sub_self, add_zero, forall_const]; linarith

  have abs_two : ‚àÄ a : ‚Ñù, ‚àÄ i : ‚Ñï, ‚Äñ(i : ‚ÑÇ) ^ ((œÉ : ‚ÑÇ) + ‚Üëa * I)‚Äñ‚Çä = i ^ œÉ := by
    intro a i
    simp_rw [‚Üê norm_toNNReal]
    -- norm_cast
    rw [norm_natCast_cpow_of_re_ne_zero _ (by simp only [add_re, ofReal_re, mul_re, I_re, mul_zero,
      ofReal_im, I_im, mul_one, sub_self, add_zero, ne_eq]; linarith)]
    simp only [add_re, re_ofNat, mul_re, ofReal_re, I_re, mul_zero, ofReal_im, I_im, mul_one,
      sub_self, add_zero, rpow_two, Real.toNNReal_of_nonneg <| rpow_nonneg (y:= œÉ) (x:= i) (by linarith)]
    norm_cast

  rw [MeasureTheory.integral_tsum]
  have x_neq_zero : X ‚â† 0 := by linarith
  . intro i
    by_cases i_eq_zero : i = 0
    . simpa [i_eq_zero] using aestronglyMeasurable_const
    . apply Continuous.aestronglyMeasurable
      fun_prop (disch := simp[i_eq_zero, x_neq_zero])
  . rw [‚Üê lt_top_iff_ne_top]
    simp_rw [enorm_mul, enorm_eq_nnnorm, nnnorm_div, ‚Üê norm_toNNReal, Complex.norm_cpow_eq_rpow_re_of_pos X_pos, norm_toNNReal, abs_two]
    simp only [nnnorm_real, add_re, re_ofNat, mul_re, ofReal_re, I_re, mul_zero, ofReal_im, I_im,
      mul_one, sub_self, add_zero, rpow_two]
    simp_rw [MeasureTheory.lintegral_mul_const' (r := ‚Üë(X ^ œÉ).toNNReal) (hr := by simp), ENNReal.tsum_mul_right]
    apply WithTop.mul_lt_top ?_ ENNReal.coe_lt_top

    conv =>
      arg 1
      arg 1
      intro i
      rw [MeasureTheory.lintegral_const_mul' (hr := by simp)]

    rw [ENNReal.tsum_mul_right]
    apply WithTop.mul_lt_top
    . rw [WithTop.lt_top_iff_ne_top, ENNReal.tsum_coe_ne_top_iff_summable_coe]
      push_cast
      convert (ArithmeticFunction.LSeriesSummable_vonMangoldt (s := œÉ)
        (by simp only [ofReal_re]; linarith)).norm
      rw [LSeries.term_def]
      split_ifs with h <;> simp[h]
    . simp_rw [‚Üê enorm_eq_nnnorm]
      rw [‚Üê MeasureTheory.hasFiniteIntegral_iff_enorm]
      exact SmoothedChebyshevDirichlet_aux_integrable diffSmoothingF SmoothingFpos suppSmoothingF
            mass_one Œµpos Œµ_lt_one œÉ_gt œÉ_le |>.hasFiniteIntegral

/-%%
\begin{proof}\leanok
\uses{Smooth1Properties_above, SmoothedChebyshevDirichlet_aux_integrable}
Interchange of summation and integration.
\end{proof}
%%-/

/-%%
Inserting the Dirichlet series expansion of the log derivative of zeta, we get the following.
\begin{theorem}[SmoothedChebyshevDirichlet]\label{SmoothedChebyshevDirichlet}
\lean{SmoothedChebyshevDirichlet}\leanok
We have that
$$\psi_{\epsilon}(X) = \sum_{n=1}^\infty \Lambda(n)\widetilde{1_{\epsilon}}(n/X).$$
\end{theorem}
%%-/
theorem SmoothedChebyshevDirichlet {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (diffSmoothingF : ContDiff ‚Ñù 1 SmoothingF)
    (SmoothingFpos : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (mass_one: ‚à´ x in Ioi (0 : ‚Ñù), SmoothingF x / x = 1)
    {X : ‚Ñù} (X_gt : 3 < X) {Œµ : ‚Ñù} (Œµpos: 0 < Œµ) (Œµ_lt_one : Œµ < 1) :
    SmoothedChebyshev SmoothingF Œµ X =
      ‚àë' n, ArithmeticFunction.vonMangoldt n * Smooth1 SmoothingF Œµ (n / X) := by
  dsimp [SmoothedChebyshev, SmoothedChebyshevIntegrand, VerticalIntegral', VerticalIntegral]
  rw [MellinTransform_eq]
  set œÉ : ‚Ñù := 1 + (Real.log X)‚Åª¬π
  have log_gt : 1 < Real.log X := by
    rw [Real.lt_log_iff_exp_lt (by linarith : 0 < X)]
    linarith [Real.exp_one_lt_d9]
  have œÉ_gt : 1 < œÉ := by
    simp only [œÉ]
    have : 0 < (Real.log X)‚Åª¬π := by
      simp only [inv_pos]
      linarith
    linarith
  have œÉ_le : œÉ ‚â§ 2 := by
    simp only [œÉ]
    have : (Real.log X)‚Åª¬π < 1 := inv_lt_one_of_one_lt‚ÇÄ log_gt
    linarith
  calc
    _ = 1 / (2 * œÄ * I) * (I * ‚à´ (t : ‚Ñù), ‚àë' n, Œõ n / (n : ‚ÑÇ) ^ (œÉ + ‚Üët * I) *
      mellin (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) (œÉ + ‚Üët * I) * X ^ (œÉ + ‚Üët * I)) := ?_
    _ = 1 / (2 * œÄ * I) * (I * ‚àë' n, ‚à´ (t : ‚Ñù), Œõ n / (n : ‚ÑÇ) ^ (œÉ + ‚Üët * I) *
      mellin (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) (œÉ + ‚Üët * I) * X ^ (œÉ + ‚Üët * I)) := ?_
    _ = 1 / (2 * œÄ * I) * (I * ‚àë' n, Œõ n * ‚à´ (t : ‚Ñù),
      mellin (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) (œÉ + ‚Üët * I) * (X / (n : ‚ÑÇ)) ^ (œÉ + ‚Üët * I)) := ?_
    _ = 1 / (2 * œÄ) * (‚àë' n, Œõ n * ‚à´ (t : ‚Ñù),
      mellin (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) (œÉ + ‚Üët * I) * (X / (n : ‚ÑÇ)) ^ (œÉ + ‚Üët * I)) := ?_
    _ = ‚àë' n, Œõ n * (1 / (2 * œÄ) * ‚à´ (t : ‚Ñù),
      mellin (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) (œÉ + ‚Üët * I) * (X / (n : ‚ÑÇ)) ^ (œÉ + ‚Üët * I)) := ?_
    _ = ‚àë' n, Œõ n * (1 / (2 * œÄ) * ‚à´ (t : ‚Ñù),
      mellin (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) (œÉ + ‚Üët * I) * ((n : ‚ÑÇ) / X) ^ (-(œÉ + ‚Üët * I))) := ?_
    _ = _ := ?_
  ¬∑ congr; ext t
    rw [LogDerivativeDirichlet]
    ¬∑ rw [‚Üê tsum_mul_right, ‚Üê tsum_mul_right]
    ¬∑ simp [œÉ_gt]
  ¬∑ congr
    rw [‚Üê MellinTransform_eq]
    exact SmoothedChebyshevDirichlet_aux_tsum_integral diffSmoothingF SmoothingFpos
      suppSmoothingF mass_one (by linarith) Œµpos Œµ_lt_one œÉ_gt œÉ_le
  ¬∑ field_simp; congr; ext n; rw [‚Üê MeasureTheory.integral_const_mul]; congr; ext t
    by_cases n_ne_zero : n = 0; simp [n_ne_zero]
    rw [mul_div_assoc, mul_assoc]
    congr
    rw [(div_eq_iff ?_).mpr]
    have := @mul_cpow_ofReal_nonneg (a := X / (n : ‚Ñù)) (b := (n : ‚Ñù)) (r := œÉ + t * I) ?_ ?_
    push_cast at this ‚ä¢
    rw [‚Üê this, div_mul_cancel‚ÇÄ]
    ¬∑ simp only [ne_eq, Nat.cast_eq_zero, n_ne_zero, not_false_eq_true]
    ¬∑ apply div_nonneg (by linarith : 0 ‚â§ X); simp
    ¬∑ simp
    ¬∑ simp only [ne_eq, cpow_eq_zero_iff, Nat.cast_eq_zero, not_and, not_not]
      intro hn; exfalso; exact n_ne_zero hn
  ¬∑ conv => rw [‚Üê mul_assoc, div_mul]; lhs; lhs; rhs; simp
  ¬∑ simp_rw [‚Üê tsum_mul_left, ‚Üê mul_assoc, mul_comm]
  ¬∑ have ht (t : ‚Ñù) : -(œÉ + t * I) = (-1) * (œÉ + t * I) := by simp
    have hn (n : ‚ÑÇ) : (n / X) ^ (-1 : ‚ÑÇ) = X / n := by simp [cpow_neg_one]
    have (n : ‚Ñï) : (log ((n : ‚ÑÇ) / (X : ‚ÑÇ)) * -1).im = 0 := by
      simp [Complex.log_im, arg_eq_zero_iff, div_nonneg (Nat.cast_nonneg _) (by linarith : 0 ‚â§ X)]
    have h (n : ‚Ñï) (t : ‚Ñù) : ((n : ‚ÑÇ) / X) ^ ((-1 : ‚ÑÇ) * (œÉ + t * I)) =
        ((n / X) ^ (-1 : ‚ÑÇ)) ^ (œÉ + ‚Üët * I) := by
      rw [cpow_mul] <;> {rw [this n]; simp [Real.pi_pos, Real.pi_nonneg]}
    conv => rhs; rhs; intro n; rhs; rhs; rhs; intro t; rhs; rw [ht t, h n t]; lhs; rw [hn]
  ¬∑ push_cast
    congr
    ext n
    by_cases n_zero : n = 0; simp [n_zero]
    have n_pos : 0 < n := by
      simpa only [n_zero, gt_iff_lt, false_or] using (Nat.eq_zero_or_pos n)
    congr
    rw [(by rw [div_mul]; simp : 1 / (2 * œÄ) = 1 / (2 * œÄ * I) * I), mul_assoc]
    conv => lhs; rhs; rhs; rhs; intro t; rw [mul_comm]; norm_cast
    have := MellinInversion œÉ (f := fun x ‚Ü¶ (Smooth1 SmoothingF Œµ x : ‚ÑÇ)) (x := n / X)
      ?_ ?_ ?_ ?_
    ¬∑ beta_reduce at this
      dsimp [MellinInverseTransform, VerticalIntegral] at this
      rw [‚Üê MellinTransform_eq, this]
    ¬∑ exact div_pos (by exact_mod_cast n_pos) (by linarith : 0 < X)
    ¬∑ apply Smooth1MellinConvergent diffSmoothingF suppSmoothingF ‚ü®Œµpos, Œµ_lt_one‚ü© SmoothingFpos mass_one
      simp only [ofReal_re]
      linarith
    ¬∑ dsimp [VerticalIntegrable]
      rw [‚Üê MellinTransform_eq]
      apply SmoothedChebyshevDirichlet_aux_integrable diffSmoothingF SmoothingFpos
        suppSmoothingF mass_one Œµpos Œµ_lt_one œÉ_gt œÉ_le
    ¬∑ refine ContinuousAt.comp (g := ofReal) RCLike.continuous_ofReal.continuousAt ?_
      exact Smooth1ContinuousAt diffSmoothingF SmoothingFpos suppSmoothingF
        Œµpos (by positivity)
/-%%
\begin{proof}\leanok
\uses{SmoothedChebyshev, MellinInversion, LogDerivativeDirichlet, Smooth1LeOne, MellinOfSmooth1b,
SmoothedChebyshevDirichlet_aux_integrable,
Smooth1ContinuousAt, SmoothedChebyshevDirichlet_aux_tsum_integral}
We have that
$$\psi_{\epsilon}(X) = \frac{1}{2\pi i}\int_{(2)}\sum_{n=1}^\infty \frac{\Lambda(n)}{n^s}
\mathcal{M}(\widetilde{1_{\epsilon}})(s)
X^{s}ds.$$
We have enough decay (thanks to quadratic decay of $\mathcal{M}(\widetilde{1_{\epsilon}})$) to
justify the interchange of summation and integration. We then get
$$\psi_{\epsilon}(X) =
\sum_{n=1}^\infty \Lambda(n)\frac{1}{2\pi i}\int_{(2)}
\mathcal{M}(\widetilde{1_{\epsilon}})(s)
(n/X)^{-s}
ds
$$
and apply the Mellin inversion formula (Theorem \ref{MellinInversion}).
\end{proof}
%%-/




/-%%
The smoothed Chebyshev function is close to the actual Chebyshev function.
\begin{theorem}[SmoothedChebyshevClose]\label{SmoothedChebyshevClose}\lean{SmoothedChebyshevClose}\leanok
We have that
$$\psi_{\epsilon}(X) = \psi(X) + O(\epsilon X \log X).$$
\end{theorem}
%%-/

--open scoped ArithmeticFunction in
theorem SmoothedChebyshevClose_aux {Smooth1 : (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù} (SmoothingF : ‚Ñù ‚Üí ‚Ñù)
    (c‚ÇÅ : ‚Ñù) (c‚ÇÅ_pos : 0 < c‚ÇÅ) (c‚ÇÅ_lt : c‚ÇÅ < 1)
    (c‚ÇÇ : ‚Ñù) (c‚ÇÇ_pos : 0 < c‚ÇÇ) (c‚ÇÇ_lt : c‚ÇÇ < 2) (hc‚ÇÇ : ‚àÄ (Œµ x : ‚Ñù), Œµ ‚àà Ioo 0 1 ‚Üí 1 + c‚ÇÇ * Œµ ‚â§ x ‚Üí Smooth1 SmoothingF Œµ x = 0)
    (C : ‚Ñù) (C_eq : C = 6 * (3 * c‚ÇÅ + c‚ÇÇ))
    (Œµ : ‚Ñù) (Œµ_pos : 0 < Œµ) (Œµ_lt_one : Œµ < 1)
    (X : ‚Ñù) (X_pos : 0 < X) (X_gt_three : 3 < X) (X_bound_1 : 1 ‚â§ X * Œµ * c‚ÇÅ) (X_bound_2 : 1 ‚â§ X * Œµ * c‚ÇÇ)
    (smooth1BddAbove : ‚àÄ (n : ‚Ñï), 0 < n ‚Üí Smooth1 SmoothingF Œµ (‚Üën / X) ‚â§ 1)
    (smooth1BddBelow : ‚àÄ (n : ‚Ñï), 0 < n ‚Üí Smooth1 SmoothingF Œµ (‚Üën / X) ‚â• 0)
    (smoothIs1 : ‚àÄ (n : ‚Ñï), 0 < n ‚Üí ‚Üën ‚â§ X * (1 - c‚ÇÅ * Œµ) ‚Üí Smooth1 SmoothingF Œµ (‚Üën / X) = 1)
    (smoothIs0 : ‚àÄ (n : ‚Ñï), 1 + c‚ÇÇ * Œµ ‚â§ ‚Üën / X ‚Üí Smooth1 SmoothingF Œµ (‚Üën / X) = 0) :
  ‚Äñ(‚Üë((‚àë' (n : ‚Ñï), ArithmeticFunction.vonMangoldt n * Smooth1 SmoothingF Œµ (‚Üën / X))) : ‚ÑÇ) -
        ‚Üë((Finset.range ‚åäX + 1‚åã‚Çä).sum ‚áëArithmeticFunction.vonMangoldt)‚Äñ ‚â§
    C * Œµ * X * Real.log X := by
  norm_cast

  let F := Smooth1 SmoothingF Œµ

  let n‚ÇÄ := ‚åàX * (1 - c‚ÇÅ * Œµ)‚åâ‚Çä

  have n‚ÇÄ_pos : 0 < n‚ÇÄ := by
    simp only [Nat.ceil_pos, n‚ÇÄ]
    subst C_eq
    simp_all only [mem_Ioo, and_imp, ge_iff_le, implies_true, mul_pos_iff_of_pos_left, sub_pos, n‚ÇÄ]
    rw[‚Üê mul_one 1]
    apply mul_lt_mul
    exact c‚ÇÅ_lt
    exact le_of_lt Œµ_lt_one
    exact Œµ_pos
    linarith

  have n‚ÇÄ_inside_le_X : X * (1 - c‚ÇÅ * Œµ) ‚â§ X := by
    nth_rewrite 2 [‚Üê mul_one X]
    apply mul_le_mul_of_nonneg
    rfl
    nth_rewrite 2 [‚Üê sub_zero 1]
    apply sub_le_sub
    rfl
    repeat positivity

  have n‚ÇÄ_le : n‚ÇÄ ‚â§ X * ((1 - c‚ÇÅ * Œµ)) + 1 := by
    simp only [n‚ÇÄ]
    apply le_of_lt
    exact Nat.ceil_lt_add_one (by bound)

  have n‚ÇÄ_gt : X * ((1 - c‚ÇÅ * Œµ)) ‚â§ n‚ÇÄ := by
    simp only [n‚ÇÄ]
    exact Nat.le_ceil (X * (1 - c‚ÇÅ * Œµ))

  have sumŒõ : Summable (fun (n : ‚Ñï) ‚Ü¶ Œõ n * F (n / X)) := by
    exact (summable_of_ne_finset_zero fun a s=>mul_eq_zero_of_right _
    (hc‚ÇÇ _ _ (by trivial) ((le_div_iff‚ÇÄ X_pos).2 (Nat.ceil_le.1 (not_lt.1
    (s ‚àò Finset.mem_range.2))))))

  have sumŒõn‚ÇÄ (n‚ÇÄ : ‚Ñï) : Summable (fun n ‚Ü¶ Œõ (n + n‚ÇÄ) * F ((n + n‚ÇÄ) / X)) := by exact_mod_cast sumŒõ.comp_injective fun Q=>by valid

  have : ‚àë' (n : ‚Ñï), Œõ n * F (n / X) =
    (‚àë n ‚àà Finset.range (n‚ÇÄ), Œõ n * F (n / X)) +
    (‚àë' (n : ‚Ñï), Œõ (n + n‚ÇÄ : ) * F ((n + n‚ÇÄ : ) / X)) := by
    rw[‚Üê Summable.sum_add_tsum_nat_add' (k := n‚ÇÄ)]
    norm_num[‚Äπ_‚Ä∫]

  rw [this]
  clear this

  let n‚ÇÅ := ‚åäX * (1 + c‚ÇÇ * Œµ)‚åã‚Çä

  have n‚ÇÅ_pos : 0 < n‚ÇÅ := by
      dsimp only [n‚ÇÅ]
      apply Nat.le_floor
      rw[Nat.succ_eq_add_one, zero_add, ‚Üê one_mul 1, Nat.cast_mul]
      apply le_of_lt
      apply mul_lt_mul
      norm_cast
      linarith
      rw[‚Üê add_zero 1, Nat.cast_add]
      apply add_le_add
      rw[Nat.cast_le_one]
      rw[‚Üê mul_zero 0, Nat.cast_mul]
      apply mul_le_mul
      apply le_of_lt
      exact_mod_cast c‚ÇÇ_pos
      exact_mod_cast le_of_lt Œµ_pos
      exact Nat.cast_nonneg' 0
      exact_mod_cast le_of_lt c‚ÇÇ_pos
      rw[Nat.cast_pos]
      repeat positivity

  have n‚ÇÅ_ge : X * (1 + c‚ÇÇ * Œµ) - 1 ‚â§ n‚ÇÅ := by
    simp only [tsub_le_iff_right, n‚ÇÅ]
    exact le_of_lt (Nat.lt_floor_add_one (X * (1 + c‚ÇÇ * Œµ)))

  have n‚ÇÅ_le : (n‚ÇÅ : ‚Ñù) ‚â§ X * (1 + c‚ÇÇ * Œµ) := by
    simp only [n‚ÇÅ]
    exact Nat.floor_le (by bound)

  have n‚ÇÅ_ge_n‚ÇÄ : n‚ÇÄ ‚â§ n‚ÇÅ := by
    have : X * (1 - c‚ÇÅ * Œµ) + 1 ‚â§ X * (1 + c‚ÇÇ * Œµ) - 1 := by
      nth_rewrite 2 [sub_eq_add_neg]
      rw[‚Üê add_le_add_iff_right 1]
      ring_nf
      rw[‚Üê add_le_add_iff_right (X * Œµ * c‚ÇÅ)]
      ring_nf
      rw[add_comm, add_assoc, add_le_add_iff_left]
      have : (2 : ‚Ñù) = 1 + 1 := by ring
      rw[this]
      apply add_le_add
      rw[mul_assoc]
      nth_rewrite 2 [mul_comm]
      rw[‚Üê mul_assoc]
      exact X_bound_1
      exact X_bound_2
    exact_mod_cast le_implies_le_of_le_of_le n‚ÇÄ_le n‚ÇÅ_ge this

  have n‚ÇÅ_sub_n‚ÇÄ : (n‚ÇÅ : ‚Ñù) - n‚ÇÄ ‚â§ X * Œµ * (c‚ÇÇ + c‚ÇÅ) := by
    calc
      (n‚ÇÅ : ‚Ñù) - n‚ÇÄ ‚â§ X * (1 + c‚ÇÇ * Œµ) - n‚ÇÄ := by
                        exact sub_le_sub_right n‚ÇÅ_le ‚Üën‚ÇÄ
       _            ‚â§ X * (1 + c‚ÇÇ * Œµ) - (X * (1 - c‚ÇÅ * Œµ)) := by
          exact tsub_le_tsub_left n‚ÇÄ_gt (X * (1 + c‚ÇÇ * Œµ))
       _            = X * Œµ * (c‚ÇÇ + c‚ÇÅ) := by ring

  have : (‚àë' (n : ‚Ñï), Œõ (n + n‚ÇÄ : ) * F ((n + n‚ÇÄ : ) / X)) =
    (‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), Œõ (n + n‚ÇÄ) * F ((n + n‚ÇÄ) / X)) +
    (‚àë' (n : ‚Ñï), Œõ (n + n‚ÇÅ : ) * F ((n + n‚ÇÅ : ) / X)) := by
    rw[‚Üê Summable.sum_add_tsum_nat_add' (k := n‚ÇÅ - n‚ÇÄ)]
    congr! 5
    ¬∑ simp only [Nat.cast_add]
    ¬∑ omega
    ¬∑ congr! 1
      norm_cast
      omega
    ¬∑ convert sumŒõn‚ÇÄ ((n‚ÇÅ - n‚ÇÄ) + n‚ÇÄ) using 4
      ¬∑ omega
      ¬∑ congr! 1
        norm_cast
        omega

  rw [this]
  clear this

  have : (‚àë' (n : ‚Ñï), Œõ (n + n‚ÇÅ) * F (‚Üë(n + n‚ÇÅ) / X)) = Œõ (n‚ÇÅ) * F (‚Üën‚ÇÅ / X) := by
    have : (‚àë' (n : ‚Ñï), Œõ (n + n‚ÇÅ) * F (‚Üë(n + n‚ÇÅ) / X)) = Œõ (n‚ÇÅ) * F (‚Üën‚ÇÅ / X) + (‚àë' (n : ‚Ñï), Œõ (n + 1 + n‚ÇÅ) * F (‚Üë(n + 1 + n‚ÇÅ) / X)) := by
      let fTemp := fun n ‚Ü¶ Œõ (n + n‚ÇÅ) * F ((‚Üën + ‚Üën‚ÇÅ) / X)
      have sum_fTemp : Summable fTemp := by exact sumŒõn‚ÇÄ n‚ÇÅ
      have hTemp (n : ‚Ñï): fTemp n = Œõ (n + n‚ÇÅ) * F (‚Üë(n + n‚ÇÅ) / X) := by rw[Nat.cast_add]
      have : ‚àë' (n : ‚Ñï), Œõ (n + n‚ÇÅ) * F (‚Üë(n + n‚ÇÅ) / X) = ‚àë' (n : ‚Ñï), fTemp n := by exact Eq.symm (tsum_congr hTemp)
      rw[this]
      have (n : ‚Ñï): fTemp (n + 1) = Œõ (n + 1 + n‚ÇÅ) * F (‚Üë(n + 1 + n‚ÇÅ) / X) := by exact hTemp (n + 1)
      have : ‚àë' (n : ‚Ñï), Œõ (n + 1 + n‚ÇÅ) * F (‚Üë(n + 1 + n‚ÇÅ) / X) = ‚àë' (n : ‚Ñï), fTemp (n + 1) := by exact Eq.symm (tsum_congr this)
      rw[this]
      have : Œõ n‚ÇÅ * F (‚Üën‚ÇÅ / X) = fTemp 0 := by
        dsimp only [fTemp]
        rw[‚Üê Nat.cast_add, zero_add]
      rw[this]
      exact Summable.tsum_eq_zero_add (sumŒõn‚ÇÄ n‚ÇÅ)
    rw[this]
    have : (‚àë' (n : ‚Ñï), Œõ (n + 1 + n‚ÇÅ) * F (‚Üë(n + 1 + n‚ÇÅ) / X)) = 0 := by
      convert tsum_zero with n
      have : n‚ÇÅ ‚â§ n + (n‚ÇÅ) := by exact Nat.le_add_left (n‚ÇÅ) n
      convert mul_zero _
      convert smoothIs0 (n + 1 + n‚ÇÅ) ?_
      rw[‚Üê mul_le_mul_right X_pos]
      have : ‚Üë(n + 1 + n‚ÇÅ) / X * X = ‚Üë(n + 1 + n‚ÇÅ) := by field_simp
      rw[this]
      have : (1 + c‚ÇÇ * Œµ) * X = 1 + (X * (1 + c‚ÇÇ * Œµ) - 1) := by ring
      rw[this, Nat.cast_add, Nat.cast_add]
      exact add_le_add (by bound) n‚ÇÅ_ge
    rw[this, add_zero]

  rw [this]
  clear this

  have X_le_floor_add_one : X ‚â§ ‚Üë‚åäX + 1‚åã‚Çä := by
    rw[Nat.floor_add_one, Nat.cast_add, Nat.cast_one]
    have temp : X ‚â§ ‚Üë‚åàX‚åâ‚Çä := by exact Nat.le_ceil X
    have : (‚åàX‚åâ‚Çä : ‚Ñù) ‚â§ ‚Üë‚åäX‚åã‚Çä + 1 := by exact_mod_cast Nat.ceil_le_floor_add_one X
    exact Preorder.le_trans X (‚Üë‚åàX‚åâ‚Çä) (‚Üë‚åäX‚åã‚Çä + 1) temp this
    positivity

  have floor_X_add_one_le_self : ‚Üë‚åäX + 1‚åã‚Çä ‚â§ X + 1 := by exact Nat.floor_le (by positivity)

  have : ‚àë x ‚àà Finset.range ‚åäX + 1‚åã‚Çä, Œõ x =
      (‚àë x ‚àà Finset.range n‚ÇÄ, Œõ x) +
      ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), Œõ (x + ‚Üën‚ÇÄ) := by
    field_simp only [add_comm _ n‚ÇÄ,n‚ÇÄ_le.trans,le_of_lt,n‚ÇÄ.le_floor,Finset.sum_range_add]
    rw [‚Üê Finset.sum_range_add, Nat.add_sub_of_le]
    dsimp only [n‚ÇÄ]
    refine Nat.ceil_le.mpr ?_
    exact Preorder.le_trans (X * (1 - c‚ÇÅ * Œµ)) X (‚Üë‚åäX + 1‚åã‚Çä) n‚ÇÄ_inside_le_X X_le_floor_add_one
  rw [this]
  clear this

  have : ‚àë n ‚àà Finset.range n‚ÇÄ, Œõ n * F (‚Üën / X) =
      ‚àë n ‚àà Finset.range n‚ÇÄ, Œõ n := by
    apply Finset.sum_congr rfl
    intro n hn
    by_cases n_zero : n = 0
    ¬∑ rw [n_zero]
      simp only [ArithmeticFunction.map_zero, CharP.cast_eq_zero, zero_div, zero_mul]
    ¬∑ convert mul_one _
      convert smoothIs1 n (Nat.zero_lt_of_ne_zero n_zero) ?_
      simp only [Finset.mem_range, n‚ÇÄ] at hn
      have : (n < ‚åàX * (1 - c‚ÇÅ * Œµ)‚åâ‚Çä) ‚Üí (n ‚â§ ‚åäX * (1 - c‚ÇÅ * Œµ)‚åã‚Çä) := by
        intro n_lt
        by_contra hcontra

        rw[not_le] at hcontra

        have temp1: (‚åäX * (1 - c‚ÇÅ * Œµ)‚åã‚Çä).succ.succ ‚â§ n.succ := by
          apply Nat.succ_le_succ
          exact Nat.succ_le_of_lt hcontra
        have : n.succ ‚â§ ‚åàX * (1 - c‚ÇÅ * Œµ)‚åâ‚Çä := by exact Nat.succ_le_of_lt hn
        have temp2: ‚åäX * (1 - c‚ÇÅ * Œµ)‚åã‚Çä + 2 = (‚åäX * (1 - c‚ÇÅ * Œµ)‚åã‚Çä + 1) + 1 := by ring
        have : ‚åäX * (1 - c‚ÇÅ * Œµ)‚åã‚Çä + 2 ‚â§ ‚åàX * (1 - c‚ÇÅ * Œµ)‚åâ‚Çä := by
          rw[temp2, ‚Üê Nat.succ_eq_add_one, ‚Üê Nat.succ_eq_add_one]
          exact Nat.le_trans temp1 hn
        rw[‚Üê and_not_self_iff (‚åäX * (1 - c‚ÇÅ * Œµ)‚åã‚Çä + 2 ‚â§ ‚åàX * (1 - c‚ÇÅ * Œµ)‚åâ‚Çä), not_le]
        apply And.intro
        exact this
        rw[temp2, ‚Üê Nat.succ_eq_add_one, Nat.lt_succ_iff]
        exact Nat.ceil_le_floor_add_one (X * (1 - c‚ÇÅ * Œµ))
      exact (Nat.le_floor_iff' n_zero).mp (this hn)

  rw [this, sub_eq_add_neg, add_assoc, add_assoc]
  nth_rewrite 3 [add_comm]
  nth_rewrite 2 [‚Üê add_assoc]
  rw [‚Üê add_assoc, ‚Üê add_assoc, ‚Üê sub_eq_add_neg]
  clear this

  have :
    ‚àë n ‚àà Finset.range n‚ÇÄ, Œõ n + (‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), Œõ (n + n‚ÇÄ) * F ((‚Üën + ‚Üën‚ÇÄ) / X)) -
      (‚àë x ‚àà Finset.range n‚ÇÄ, Œõ x + ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), Œõ (x + n‚ÇÄ))
      =
      (‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), Œõ (n + n‚ÇÄ) * F ((‚Üën + ‚Üën‚ÇÄ) / X)) -
      (‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), Œõ (x + n‚ÇÄ)) := by
    ring
  rw [this]
  clear this

  have :
    ‚Äñ‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), Œõ (n + n‚ÇÄ) * F ((‚Üën + ‚Üën‚ÇÄ) / X) - ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), Œõ (x + n‚ÇÄ) + Œõ n‚ÇÅ * F (‚Üën‚ÇÅ / X)‚Äñ
    ‚â§
    (‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ * ‚ÄñF ((‚Üën + ‚Üën‚ÇÄ) / X)‚Äñ) +
      ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), ‚ÄñŒõ (x + n‚ÇÄ)‚Äñ +
      ‚ÄñŒõ n‚ÇÅ‚Äñ * ‚ÄñF (‚Üën‚ÇÅ / X)‚Äñ:= by
    apply norm_add_le_of_le
    apply norm_sub_le_of_le
    apply norm_sum_le_of_le
    intro b hb
    exact norm_mul_le_of_le (by rfl) (by rfl)
    apply norm_sum_le_of_le
    intro b hb
    rfl
    exact_mod_cast norm_mul_le_of_le (by rfl) (by rfl)

  refine this.trans ?_

  clear this

  have vonBnd1 :
    ‚àÄ n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ ‚â§ Real.log (X * (1 + c‚ÇÇ * Œµ)) := by
    intro n hn
    have n_add_n0_le_n1: (n : ‚Ñù) + n‚ÇÄ ‚â§ n‚ÇÅ := by
      apply le_of_lt
      rw[Finset.mem_range] at hn
      rw[‚Üê add_lt_add_iff_right (-‚Üën‚ÇÄ), add_neg_cancel_right, add_comm, ‚Üê sub_eq_neg_add]
      exact_mod_cast hn
    have inter1: ‚Äñ Œõ (n + n‚ÇÄ)‚Äñ ‚â§ Real.log (‚Üën + ‚Üën‚ÇÄ) := by
      rw[Real.norm_of_nonneg, ‚Üê Nat.cast_add]
      apply ArithmeticFunction.vonMangoldt_le_log
      apply ArithmeticFunction.vonMangoldt_nonneg
    have inter2: Real.log (‚Üën + ‚Üën‚ÇÄ) ‚â§ Real.log (‚Üën‚ÇÅ) := by exact_mod_cast Real.log_le_log (by positivity) n_add_n0_le_n1
    have inter3: Real.log (‚Üën‚ÇÅ) ‚â§ Real.log (X * (1 + c‚ÇÇ * Œµ)) := by exact Real.log_le_log (by bound) (by linarith)
    exact le_implies_le_of_le_of_le inter1 inter3 inter2

  have bnd1 :
    ‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ * ‚ÄñF ((‚Üën + ‚Üën‚ÇÄ) / X)‚Äñ
    ‚â§ (n‚ÇÅ - n‚ÇÄ) * Real.log (X * (1 + c‚ÇÇ * Œµ)) := by
    have : (n‚ÇÅ - n‚ÇÄ) * Real.log (X * (1 + c‚ÇÇ * Œµ)) = (‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), Real.log (X * (1 + c‚ÇÇ * Œµ))) := by
      rw[‚Üê Nat.cast_sub]
      nth_rewrite 1 [‚Üê Finset.card_range (n‚ÇÅ - n‚ÇÄ)]
      rw[Finset.cast_card, Finset.sum_const, smul_one_mul]
      exact Eq.symm (Finset.sum_const (Real.log (X * (1 + c‚ÇÇ * Œµ))))
      exact n‚ÇÅ_ge_n‚ÇÄ
    rw [this]
    apply Finset.sum_le_sum
    intro n hn
    rw [‚Üê mul_one (Real.log (X * (1 + c‚ÇÇ * Œµ)))]
    apply mul_le_mul
    apply vonBnd1
    exact hn
    rw[Real.norm_of_nonneg, ‚Üê Nat.cast_add]
    dsimp only [F]
    apply smooth1BddAbove
    bound
    rw[‚Üê Nat.cast_add]
    dsimp only [F]
    apply smooth1BddBelow
    bound
    rw[Real.norm_of_nonneg, ‚Üê Nat.cast_add]
    dsimp only [F]
    apply smooth1BddBelow
    bound
    rw[‚Üê Nat.cast_add]
    dsimp only [F]
    apply smooth1BddBelow
    bound
    rw[‚Üê Real.log_one]
    exact Real.log_le_log (by positivity) (by bound)

  have bnd2 :
    ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), ‚ÄñŒõ (x + n‚ÇÄ)‚Äñ ‚â§ (‚åäX + 1‚åã‚Çä - n‚ÇÄ) * Real.log (X + 1) := by
    have : (‚åäX + 1‚åã‚Çä - n‚ÇÄ) * Real.log (X + 1) = (‚àë n ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), Real.log (X + 1)) := by
      rw[‚Üê Nat.cast_sub]
      nth_rewrite 1 [‚Üê Finset.card_range (‚åäX + 1‚åã‚Çä - n‚ÇÄ)]
      rw[Finset.cast_card, Finset.sum_const, smul_one_mul]
      exact Eq.symm (Finset.sum_const (Real.log (X + 1)))
      simp only [Nat.ceil_le, n‚ÇÄ, F]
      exact Preorder.le_trans (X * (1 - c‚ÇÅ * Œµ)) X (‚Üë‚åäX + 1‚åã‚Çä) n‚ÇÄ_inside_le_X X_le_floor_add_one
    rw[this]
    apply Finset.sum_le_sum
    intro n hn
    have n_add_n0_le_X_add_one: (n : ‚Ñù) + n‚ÇÄ ‚â§ X + 1 := by
      rw[Finset.mem_range] at hn
      rw[‚Üê add_le_add_iff_right (-‚Üën‚ÇÄ), add_assoc, ‚Üê sub_eq_add_neg, sub_self, add_zero, ‚Üê sub_eq_add_neg]
      have temp: (n : ‚Ñù) < ‚åäX + 1‚åã‚Çä - n‚ÇÄ := by
        rw[‚Üê Nat.cast_sub, Nat.cast_lt]
        exact hn
        simp only [Nat.ceil_le, n‚ÇÄ, F]
        exact Preorder.le_trans (X * (1 - c‚ÇÅ * Œµ)) X (‚Üë‚åäX + 1‚åã‚Çä) n‚ÇÄ_inside_le_X X_le_floor_add_one
      have : ‚Üë‚åäX + 1‚åã‚Çä - ‚Üën‚ÇÄ ‚â§ X + 1 - ‚Üën‚ÇÄ := by
        apply sub_le_sub
        exact floor_X_add_one_le_self
        rfl
      exact le_of_lt (gt_of_ge_of_gt this temp)
    have inter1: ‚Äñ Œõ (n + n‚ÇÄ)‚Äñ ‚â§ Real.log (‚Üën + ‚Üën‚ÇÄ) := by
      rw[Real.norm_of_nonneg, ‚Üê Nat.cast_add]
      apply ArithmeticFunction.vonMangoldt_le_log
      apply ArithmeticFunction.vonMangoldt_nonneg
    have inter2: Real.log (‚Üën + ‚Üën‚ÇÄ) ‚â§ Real.log (X + 1) := by exact_mod_cast Real.log_le_log (by positivity) (n_add_n0_le_X_add_one)
    exact Preorder.le_trans ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ (Real.log (‚Üën + ‚Üën‚ÇÄ)) (Real.log (X + 1)) inter1 inter2

  have largeSumBound:= add_le_add bnd1 bnd2

  clear vonBnd1 bnd1 bnd2

  have inter1 : Real.log (X * (1 + c‚ÇÇ * Œµ)) ‚â§ Real.log (3 * X) := by
    apply Real.log_le_log
    positivity
    have const_le_2: 1 + c‚ÇÇ * Œµ ‚â§ 3 := by
      have : (3 : ‚Ñù) = 1 + 2 := by ring
      rw[this]
      apply add_le_add
      rfl
      rw[‚Üê mul_one 2]
      exact mul_le_mul (by linarith) (by linarith) (by positivity) (by positivity)
    rw[mul_comm]
    exact mul_le_mul const_le_2 (by rfl) (by positivity) (by positivity)

  have inter2 : (‚Üën‚ÇÅ - ‚Üën‚ÇÄ) * Real.log (X * (1 + c‚ÇÇ * Œµ)) ‚â§ (X * Œµ * (c‚ÇÇ + c‚ÇÅ)) * (Real.log (X) + Real.log (3)) := by
    apply mul_le_mul
    exact n‚ÇÅ_sub_n‚ÇÄ
    rw[‚Üê Real.log_mul]
    nth_rewrite 3 [mul_comm]
    exact inter1
    repeat positivity
    rw[‚Üê Real.log_one]
    exact Real.log_le_log (by positivity) (by bound)
    positivity

  have inter3 : (X * Œµ * (c‚ÇÇ + c‚ÇÅ)) * (Real.log (X) + Real.log (3)) ‚â§ 2 * (X * Œµ * (c‚ÇÇ + c‚ÇÅ)) * (Real.log (X)) := by
    nth_rewrite 3 [mul_assoc]
    rw[two_mul, mul_add]
    apply add_le_add
    rfl
    apply mul_le_mul
    rfl
    exact Real.log_le_log (by positivity) (by linarith)
    rw[‚Üê Real.log_one]
    exact Real.log_le_log (by positivity) (by linarith)
    positivity

  have inter4 : (‚Üën‚ÇÅ - ‚Üën‚ÇÄ) * Real.log (X * (1 + c‚ÇÇ * Œµ)) ‚â§ 2 * (X * Œµ * (c‚ÇÅ + c‚ÇÇ)) * (Real.log (X)) := by
    nth_rewrite 2 [add_comm]
    exact
      Preorder.le_trans ((‚Üën‚ÇÅ - ‚Üën‚ÇÄ) * Real.log (X * (1 + c‚ÇÇ * Œµ)))
        (X * Œµ * (c‚ÇÇ + c‚ÇÅ) * (Real.log X + Real.log 3)) (2 * (X * Œµ * (c‚ÇÇ + c‚ÇÅ)) * Real.log X)
        inter2 inter3

  clear inter2 inter3

  have inter5: Real.log (X + 1) ‚â§ Real.log (3 * X) := by exact Real.log_le_log (by positivity) (by linarith)

  have inter6 : (‚åäX + 1‚åã‚Çä - n‚ÇÄ) * Real.log (X + 1) ‚â§ 2 * (X * Œµ * c‚ÇÅ) * (Real.log (X) + Real.log (3)) := by
    apply mul_le_mul
    have : 2 * (X * Œµ * c‚ÇÅ) = (X * (1 + Œµ * c‚ÇÅ)) - (X * (1 - Œµ * c‚ÇÅ)) := by ring
    rw[this]
    apply sub_le_sub
    have : X + 1 ‚â§ X * (1 + Œµ * c‚ÇÅ) := by
      ring_nf
      rw[add_comm, add_le_add_iff_left]
      exact X_bound_1
    exact Preorder.le_trans (‚Üë‚åäX + 1‚åã‚Çä) (X + 1) (X * (1 + Œµ * c‚ÇÅ)) floor_X_add_one_le_self this
    nth_rewrite 2 [mul_comm]
    exact n‚ÇÄ_gt
    rw[‚Üê Real.log_mul, mul_comm]
    exact inter5
    repeat positivity
    rw[‚Üê Real.log_one]
    exact Real.log_le_log (by positivity) (by linarith)
    positivity

  have inter7: 2 * (X * Œµ * c‚ÇÅ) * (Real.log (X) + Real.log (3)) ‚â§ 4 * (X * Œµ * c‚ÇÅ) * Real.log (X) := by
    have : (4 : ‚Ñù) = 2 + 2 := by ring
    rw[this, mul_add]
    nth_rewrite 5 [mul_assoc]
    rw[add_mul]
    apply add_le_add
    nth_rewrite 1 [mul_assoc]
    rfl
    nth_rewrite 1 [mul_assoc]
    apply mul_le_mul
    rfl
    apply mul_le_mul
    rfl
    exact Real.log_le_log (by positivity) (by linarith)
    rw[‚Üê Real.log_one]
    exact Real.log_le_log (by positivity) (by linarith)
    repeat positivity

  have inter8: (‚åäX + 1‚åã‚Çä - n‚ÇÄ) * Real.log (X + 1) ‚â§ 4 * (X * Œµ * c‚ÇÅ) * Real.log (X) := by
    exact
      Preorder.le_trans ((‚Üë‚åäX + 1‚åã‚Çä - ‚Üën‚ÇÄ) * Real.log (X + 1))
        (2 * (X * Œµ * c‚ÇÅ) * (Real.log X + Real.log 3)) (4 * (X * Œµ * c‚ÇÅ) * Real.log X) inter6 inter7

  clear inter5 inter6 inter7

  have inter9: (‚Üën‚ÇÅ - ‚Üën‚ÇÄ) * Real.log (X * (1 + c‚ÇÇ * Œµ)) + (‚Üë‚åäX + 1‚åã‚Çä - ‚Üën‚ÇÄ) * Real.log (X + 1) ‚â§
    2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * Real.log X := by
    have : 2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) = 2 * (X * Œµ * (c‚ÇÅ + c‚ÇÇ)) + 4 * (X * Œµ * c‚ÇÅ) := by ring
    rw[this, add_mul]
    exact add_le_add inter4 inter8

  have largeSumBound2 : ‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ * ‚ÄñF ((‚Üën + ‚Üën‚ÇÄ) / X)‚Äñ + ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), ‚ÄñŒõ (x + n‚ÇÄ)‚Äñ ‚â§
    2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * Real.log X := by
    exact
      Preorder.le_trans (‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ * ‚ÄñF ((‚Üën + ‚Üën‚ÇÄ) / X)‚Äñ + ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), ‚ÄñŒõ (x + n‚ÇÄ)‚Äñ)
        ((‚Üën‚ÇÅ - ‚Üën‚ÇÄ) * Real.log (X * (1 + c‚ÇÇ * Œµ)) + (‚Üë‚åäX + 1‚åã‚Çä - ‚Üën‚ÇÄ) * Real.log (X + 1))
        (2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * Real.log X) largeSumBound inter9

  clear largeSumBound inter4 inter8 inter9

  have inter10 : ‚ÄñŒõ n‚ÇÅ‚Äñ * ‚ÄñF (‚Üën‚ÇÅ / X)‚Äñ ‚â§ Real.log (X * (1 + c‚ÇÇ * Œµ)) := by
    rw[‚Üê mul_one (Real.log (X * (1 + c‚ÇÇ * Œµ)))]
    apply mul_le_mul
    rw[Real.norm_of_nonneg]
    have temp : Œõ n‚ÇÅ ‚â§ Real.log (n‚ÇÅ) := by exact ArithmeticFunction.vonMangoldt_le_log
    have : Real.log (n‚ÇÅ) ‚â§ Real.log (X * (1 + c‚ÇÇ * Œµ)) := by
      apply Real.log_le_log
      exact_mod_cast n‚ÇÅ_pos
      exact n‚ÇÅ_le
    exact Preorder.le_trans (Œõ n‚ÇÅ) (Real.log ‚Üën‚ÇÅ) (Real.log (X * (1 + c‚ÇÇ * Œµ))) temp this
    exact ArithmeticFunction.vonMangoldt_nonneg
    rw[Real.norm_of_nonneg]
    apply smooth1BddAbove
    exact n‚ÇÅ_pos
    apply smooth1BddBelow
    exact n‚ÇÅ_pos
    rw[Real.norm_of_nonneg]
    apply smooth1BddBelow
    exact n‚ÇÅ_pos
    apply smooth1BddBelow
    exact n‚ÇÅ_pos
    rw[‚Üê Real.log_one]
    exact Real.log_le_log (by positivity) (by bound)

  have inter11 : ‚ÄñŒõ n‚ÇÅ‚Äñ * ‚ÄñF (‚Üën‚ÇÅ / X)‚Äñ ‚â§ Real.log (3 * X) := by
    exact
      Preorder.le_trans (‚ÄñŒõ n‚ÇÅ‚Äñ * ‚ÄñF (‚Üën‚ÇÅ / X)‚Äñ) (Real.log (X * (1 + c‚ÇÇ * Œµ))) (Real.log (3 * X))
        inter10 inter1

  clear inter1 inter10

  have largeSumBound3 : ‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ * ‚ÄñF ((‚Üën + ‚Üën‚ÇÄ) / X)‚Äñ + ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), ‚ÄñŒõ (x + n‚ÇÄ)‚Äñ +
    ‚ÄñŒõ n‚ÇÅ‚Äñ * ‚ÄñF (‚Üën‚ÇÅ / X)‚Äñ ‚â§ 2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * Real.log X + Real.log (3 * X) := by exact add_le_add largeSumBound2 inter11

  clear largeSumBound2 inter11

  have largeSumBound4 : ‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ * ‚ÄñF ((‚Üën + ‚Üën‚ÇÄ) / X)‚Äñ + ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), ‚ÄñŒõ (x + n‚ÇÄ)‚Äñ +
    ‚ÄñŒõ n‚ÇÅ‚Äñ * ‚ÄñF (‚Üën‚ÇÅ / X)‚Äñ ‚â§ 2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * (2 * Real.log X + Real.log (3)) := by
    have : 2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * Real.log X + Real.log (3 * X) ‚â§
      2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * (Real.log X + Real.log (3 * X)) := by
      nth_rewrite 2 [mul_add]
      apply add_le_add
      rfl
      nth_rewrite 1 [‚Üê one_mul (Real.log (3 * X))]
      apply mul_le_mul
      ring_nf
      rw[‚Üê zero_add 1]
      exact add_le_add (by positivity) (by bound)
      rfl
      rw[‚Üê Real.log_one]
      exact Real.log_le_log (by positivity) (by linarith)
      positivity
    nth_rewrite 2 [two_mul, add_assoc]
    rw [‚Üê Real.log_mul, mul_comm X 3]

    exact
      Preorder.le_trans
        (‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ * ‚ÄñF ((‚Üën + ‚Üën‚ÇÄ) / X)‚Äñ +
            ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), ‚ÄñŒõ (x + n‚ÇÄ)‚Äñ +
          ‚ÄñŒõ n‚ÇÅ‚Äñ * ‚ÄñF (‚Üën‚ÇÅ / X)‚Äñ)
        (2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * Real.log X + Real.log (3 * X))
        (2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * (Real.log X + Real.log (3 * X))) largeSumBound3 this
    repeat positivity

  clear largeSumBound3

  have largeSumBoundFinal : ‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ * ‚ÄñF ((‚Üën + ‚Üën‚ÇÄ) / X)‚Äñ + ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), ‚ÄñŒõ (x + n‚ÇÄ)‚Äñ +
    ‚ÄñŒõ n‚ÇÅ‚Äñ * ‚ÄñF (‚Üën‚ÇÅ / X)‚Äñ ‚â§ (6 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ))) * Real.log (X) := by
    have : 2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * (2 * Real.log X + Real.log (3)) <= (6 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ))) * Real.log (X) := by
      rw[mul_add]
      have : (6 : ‚Ñù) = 4 + 2 := by ring
      rw[this, add_mul, add_mul]
      apply add_le_add
      ring_nf
      rfl
      apply mul_le_mul
      rfl
      exact Real.log_le_log (by positivity) (by linarith)
      rw[‚Üê Real.log_one]
      exact Real.log_le_log (by positivity) (by linarith)
      positivity
    exact
      Preorder.le_trans
        (‚àë n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñŒõ (n + n‚ÇÄ)‚Äñ * ‚ÄñF ((‚Üën + ‚Üën‚ÇÄ) / X)‚Äñ +
            ‚àë x ‚àà Finset.range (‚åäX + 1‚åã‚Çä - n‚ÇÄ), ‚ÄñŒõ (x + n‚ÇÄ)‚Äñ +
          ‚ÄñŒõ n‚ÇÅ‚Äñ * ‚ÄñF (‚Üën‚ÇÅ / X)‚Äñ)
        (2 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * (2 * Real.log X + Real.log 3))
        (6 * (X * Œµ * (3 * c‚ÇÅ + c‚ÇÇ)) * Real.log X) largeSumBound4 this

  clear largeSumBound4

  rw[C_eq]
  linear_combination largeSumBoundFinal

theorem SmoothedChebyshevClose {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (diffSmoothingF : ContDiff ‚Ñù 1 SmoothingF)
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1) :
    ‚àÉ (C : ‚Ñù), ‚àÄ (X : ‚Ñù) (_ : 3 < X) (Œµ : ‚Ñù) (_ : 0 < Œµ) (_ : Œµ < 1) (_ : 2 < X * Œµ),
    ‚ÄñSmoothedChebyshev SmoothingF Œµ X - ChebyshevPsi X‚Äñ ‚â§ C * Œµ * X * Real.log X := by
  have vonManBnd (n : ‚Ñï) : ArithmeticFunction.vonMangoldt n ‚â§ Real.log n :=
    ArithmeticFunction.vonMangoldt_le_log

  obtain ‚ü®c‚ÇÅ, c‚ÇÅ_pos, c‚ÇÅ_eq, hc‚ÇÅ‚ü© := Smooth1Properties_below suppSmoothingF mass_one

  obtain ‚ü®c‚ÇÇ, c‚ÇÇ_pos, c‚ÇÇ_eq, hc‚ÇÇ‚ü© := Smooth1Properties_above suppSmoothingF

  have c‚ÇÅ_lt : c‚ÇÅ < 1 := by
    rw[c‚ÇÅ_eq]
    exact lt_trans (Real.log_two_lt_d9) (by norm_num)

  have c‚ÇÇ_lt : c‚ÇÇ < 2 := by
    rw[c‚ÇÇ_eq]
    nth_rewrite 3 [‚Üê mul_one 2]
    apply mul_lt_mul'
    rfl
    exact lt_trans (Real.log_two_lt_d9) (by norm_num)
    exact Real.log_nonneg (by norm_num)
    positivity

  let C : ‚Ñù := 6 * (3 * c‚ÇÅ + c‚ÇÇ)
  have C_eq : C = 6 * (3 * c‚ÇÅ + c‚ÇÇ) := rfl

  clear_value C

  refine ‚ü®C, fun X X_ge_C Œµ Œµpos Œµ_lt_one ‚Ü¶ ?_‚ü©
  unfold ChebyshevPsi

  have X_gt_zero : (0 : ‚Ñù) < X := by linarith

  have X_ne_zero : X ‚â† 0 := by linarith

  have n_on_X_pos {n : ‚Ñï} (npos : 0 < n) :
      0 < n / X := by
    have : (0 : ‚Ñù) < n := by exact_mod_cast npos
    positivity

  have smooth1BddAbove (n : ‚Ñï) (npos : 0 < n) :
      Smooth1 SmoothingF Œµ (n / X) ‚â§ 1 :=
    Smooth1LeOne SmoothingFnonneg mass_one Œµpos (n_on_X_pos npos)

  have smooth1BddBelow (n : ‚Ñï) (npos : 0 < n) :
      Smooth1 SmoothingF Œµ (n / X) ‚â• 0 :=
    Smooth1Nonneg SmoothingFnonneg (n_on_X_pos npos) Œµpos

  have smoothIs1 (n : ‚Ñï) (npos : 0 < n) (n_le : n ‚â§ X * (1 - c‚ÇÅ * Œµ)) :
      Smooth1 SmoothingF Œµ (‚Üën / X) = 1 := by
    apply hc‚ÇÅ (Œµ := Œµ) (n / X) Œµpos (n_on_X_pos npos)
    exact (div_le_iff‚ÇÄ' X_gt_zero).mpr n_le

  have smoothIs0 (n : ‚Ñï) (n_le : (1 + c‚ÇÇ * Œµ) ‚â§ n / X) :=
    hc‚ÇÇ (Œµ := Œµ) (n / X) ‚ü®Œµpos, Œµ_lt_one‚ü© n_le

  have Œµ_pos: Œµ > 0 := by linarith
  have X_pos: X > 0 := by linarith
  have X_gt_three : 3 < X := by linarith

  intro X_bound

  have X_bound_1 : 1 ‚â§ X * Œµ * c‚ÇÅ := by
    rw[c‚ÇÅ_eq, ‚Üê div_le_iff‚ÇÄ]
    have : 1 / Real.log 2 < 2 := by
      nth_rewrite 2 [‚Üê one_div_one_div 2]
      rw[one_div_lt_one_div]
      exact lt_of_le_of_lt (by norm_num) (Real.log_two_gt_d9)
      exact Real.log_pos (by norm_num)
      norm_num
    apply le_of_lt
    exact gt_trans X_bound this
    exact Real.log_pos (by norm_num)

  have X_bound_2 : 1 ‚â§ X * Œµ * c‚ÇÇ := by
    rw[c‚ÇÇ_eq, ‚Üê div_le_iff‚ÇÄ]
    have : 1 / (2 * Real.log 2) < 2 := by
      nth_rewrite 3 [‚Üê one_div_one_div 2]
      rw[one_div_lt_one_div, ‚Üê one_mul (1 / 2)]
      apply mul_lt_mul
      norm_num
      apply le_of_lt
      exact lt_trans (by norm_num) (Real.log_two_gt_d9)
      repeat norm_num
      exact Real.log_pos (by norm_num)
      norm_num
    apply le_of_lt
    exact gt_trans X_bound this
    norm_num
    exact Real.log_pos (by norm_num)

  rw [SmoothedChebyshevDirichlet diffSmoothingF SmoothingFnonneg suppSmoothingF
    mass_one (by linarith) Œµpos Œµ_lt_one]

  convert SmoothedChebyshevClose_aux SmoothingF c‚ÇÅ c‚ÇÅ_pos c‚ÇÅ_lt c‚ÇÇ c‚ÇÇ_pos c‚ÇÇ_lt hc‚ÇÇ C C_eq Œµ Œµ_pos Œµ_lt_one
    X X_pos X_gt_three X_bound_1 X_bound_2 smooth1BddAbove smooth1BddBelow smoothIs1 smoothIs0

/-%%
\begin{proof}\leanok
\uses{SmoothedChebyshevDirichlet, Smooth1Properties_above,
Smooth1Properties_below,
Smooth1Nonneg,
Smooth1LeOne,
ChebyshevPsi}
Take the difference. By Lemma \ref{Smooth1Properties_above} and \ref{Smooth1Properties_below},
the sums agree except when $1-c \epsilon \leq n/X \leq 1+c \epsilon$. This is an interval of
length $\ll \epsilon X$, and the summands are bounded by $\Lambda(n) \ll \log X$.

%[No longer relevant, as we will do better than any power of log savings...: This is not enough,
%as it loses a log! (Which is fine if our target is the strong PNT, with
%exp-root-log savings, but not here with the ``softer'' approach.) So we will need something like
%the Selberg sieve (already in Mathlib? Or close?) to conclude that the number of primes in this
%interval is $\ll \epsilon X / \log X + 1$.
%(The number of prime powers is $\ll X^{1/2}$.)
%And multiplying that by $\Lambda (n) \ll \log X$ gives the desired bound.]
\end{proof}
%%-/

/-%%
Returning to the definition of $\psi_{\epsilon}$, fix a large $T$ to be chosen later, and set
$\sigma_0 = 1 + 1 / log X$,
$\sigma_1 = 1- A/ \log T^9$, and
$\sigma_2<\sigma_1$ a constant.
Pull
contours (via rectangles!) to go
from $\sigma_0-i\infty$ up to $\sigma_0-iT$, then over to $\sigma_1-iT$,
up to $\sigma_1-3i$, over to $\sigma_2-3i$, up to $\sigma_2+3i$, back over to $\sigma_1+3i$, up to $\sigma_1+iT$, over to $\sigma_0+iT$, and finally up to $\sigma_0+i\infty$.

\begin{verbatim}
                    |
                    | I‚Çâ
              +-----+
              |  I‚Çà
              |
           I‚Çá |
              |
              |
  +-----------+
  |       I‚ÇÜ
I‚ÇÖ|
--œÉ‚ÇÇ----------œÉ‚ÇÅ--1-œÉ‚ÇÄ----
  |
  |       I‚ÇÑ
  +-----------+
              |
              |
            I‚ÇÉ|
              |
              |  I‚ÇÇ
              +---+
                  |
                  | I‚ÇÅ
                  |
\end{verbatim}

In the process, we will pick up the residue at $s=1$.
We will do this in several stages. Here the interval integrals are defined as follows:
%%-/

/-%%
\begin{definition}[I‚ÇÅ]\label{I1}\lean{I‚ÇÅ}\leanok
$$
I_1(\nu, \epsilon, X, T) := \frac{1}{2\pi i} \int_{-\infty}^{-T}
\left(
\frac{-\zeta'}\zeta(\sigma_0 + t i)
\right)
 \mathcal M(\widetilde 1_\epsilon)(\sigma_0 + t i)
X^{\sigma_0 + t i}
\ i \ dt
$$
\end{definition}
%%-/
noncomputable def I‚ÇÅ (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ X T : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * (I * (‚à´ t : ‚Ñù in Iic (-T),
      SmoothedChebyshevIntegrand SmoothingF Œµ X ((1 + (Real.log X)‚Åª¬π) + t * I)))

/-%%
\begin{definition}[I‚ÇÇ]\label{I2}\lean{I‚ÇÇ}\leanok
$$
I_2(\nu, \epsilon, X, T, \sigma_1) := \frac{1}{2\pi i} \int_{\sigma_1}^{\sigma_0}
\left(
\frac{-\zeta'}\zeta(\sigma - i T)
\right)
  \mathcal M(\widetilde 1_\epsilon)(\sigma - i T)
X^{\sigma - i T} \ d\sigma
$$
\end{definition}
%%-/
noncomputable def I‚ÇÇ (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ T X œÉ‚ÇÅ : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * ((‚à´ œÉ in œÉ‚ÇÅ..(1 + (Real.log X)‚Åª¬π),
    SmoothedChebyshevIntegrand SmoothingF Œµ X (œÉ - T * I)))

/-%%
\begin{definition}[I‚ÇÉ‚Çá]\label{I37}\lean{I‚ÇÉ‚Çá}\leanok
$$
I_{37}(\nu, \epsilon, X, T, \sigma_1) := \frac{1}{2\pi i} \int_{-T}^{T}
\left(
\frac{-\zeta'}\zeta(\sigma_1 + t i)
\right)
  \mathcal M(\widetilde 1_\epsilon)(\sigma_1 + t i)
X^{\sigma_1 + t i} \ i \ dt
$$
\end{definition}
%%-/
noncomputable def I‚ÇÉ‚Çá (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ T X œÉ‚ÇÅ : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * (I * (‚à´ t in (-T)..T,
    SmoothedChebyshevIntegrand SmoothingF Œµ X (œÉ‚ÇÅ + t * I)))

/-%%
\begin{definition}[I‚Çà]\label{I8}\lean{I‚Çà}\leanok
$$
I_8(\nu, \epsilon, X, T, \sigma_1) := \frac{1}{2\pi i} \int_{\sigma_1}^{\sigma_0}
\left(
\frac{-\zeta'}\zeta(\sigma + T i)
\right)
  \mathcal M(\widetilde 1_\epsilon)(\sigma + T i)
X^{\sigma + T i} \ d\sigma
$$
\end{definition}
%%-/
noncomputable def I‚Çà (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ T X œÉ‚ÇÅ : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * ((‚à´ œÉ in œÉ‚ÇÅ..(1 + (Real.log X)‚Åª¬π),
    SmoothedChebyshevIntegrand SmoothingF Œµ X (œÉ + T * I)))

/-%%
\begin{definition}[I‚Çâ]\label{I9}\lean{I‚Çâ}\leanok
$$
I_9(\nu, \epsilon, X, T) := \frac{1}{2\pi i} \int_{T}^{\infty}
\left(
\frac{-\zeta'}\zeta(\sigma_0 + t i)
\right)
  \mathcal M(\widetilde 1_\epsilon)(\sigma_0 + t i)
X^{\sigma_0 + t i} \ i \ dt
$$
\end{definition}
%%-/
noncomputable def I‚Çâ (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ X T : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * (I * (‚à´ t : ‚Ñù in Ici T,
      SmoothedChebyshevIntegrand SmoothingF Œµ X ((1 + (Real.log X)‚Åª¬π) + t * I)))

/-%%
\begin{definition}[I‚ÇÉ]\label{I3}\lean{I‚ÇÉ}\leanok
$$
I_3(\nu, \epsilon, X, T, \sigma_1) := \frac{1}{2\pi i} \int_{-T}^{-3}
\left(
\frac{-\zeta'}\zeta(\sigma_1 + t i)
\right)
  \mathcal M(\widetilde 1_\epsilon)(\sigma_1 + t i)
X^{\sigma_1 + t i} \ i \ dt
$$
\end{definition}
%%-/
noncomputable def I‚ÇÉ (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ T X œÉ‚ÇÅ : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * (I * (‚à´ t in (-T)..(-3),
    SmoothedChebyshevIntegrand SmoothingF Œµ X (œÉ‚ÇÅ + t * I)))


/-%%\begin{definition}[I‚Çá]\label{I7}\lean{I‚Çá}\leanok
$$
I_7(\nu, \epsilon, X, T, \sigma_1) := \frac{1}{2\pi i} \int_{3}^{T}
\left(
\frac{-\zeta'}\zeta(\sigma_1 + t i)
\right)
  \mathcal M(\widetilde 1_\epsilon)(\sigma_1 + t i)
X^{\sigma_1 + t i} \ i \ dt
$$
\end{definition}
%%-/
noncomputable def I‚Çá (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ T X œÉ‚ÇÅ : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * (I * (‚à´ t in (3 : ‚Ñù)..T,
    SmoothedChebyshevIntegrand SmoothingF Œµ X (œÉ‚ÇÅ + t * I)))


/-%%
\begin{definition}[I‚ÇÑ]\label{I4}\lean{I‚ÇÑ}\leanok
$$
I_4(\nu, \epsilon, X, \sigma_1, \sigma_2) := \frac{1}{2\pi i} \int_{\sigma_2}^{\sigma_1}
\left(
\frac{-\zeta'}\zeta(\sigma - 3 i)
\right)
  \mathcal M(\widetilde 1_\epsilon)(\sigma - 3 i)
X^{\sigma - 3 i} \ d\sigma
$$
\end{definition}
%%-/
noncomputable def I‚ÇÑ (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ X œÉ‚ÇÅ œÉ‚ÇÇ : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * ((‚à´ œÉ in œÉ‚ÇÇ..œÉ‚ÇÅ,
    SmoothedChebyshevIntegrand SmoothingF Œµ X (œÉ - 3 * I)))

/-%%
\begin{definition}[I‚ÇÜ]\label{I6}\lean{I‚ÇÜ}\leanok
$$
I_6(\nu, \epsilon, X, \sigma_1, \sigma_2) := \frac{1}{2\pi i} \int_{\sigma_2}^{\sigma_1}
\left(
\frac{-\zeta'}\zeta(\sigma + 3 i)
\right)
  \mathcal M(\widetilde 1_\epsilon)(\sigma + 3 i)
X^{\sigma + 3 i} \ d\sigma
$$
\end{definition}
%%-/
noncomputable def I‚ÇÜ (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ X œÉ‚ÇÅ œÉ‚ÇÇ : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * ((‚à´ œÉ in œÉ‚ÇÇ..œÉ‚ÇÅ,
    SmoothedChebyshevIntegrand SmoothingF Œµ X (œÉ + 3 * I)))

/-%%
\begin{definition}[I‚ÇÖ]\label{I5}\lean{I‚ÇÖ}\leanok
$$
I_5(\nu, \epsilon, X, \sigma_2) := \frac{1}{2\pi i} \int_{-3}^{3}
\left(
\frac{-\zeta'}\zeta(\sigma_2 + t i)
\right)
  \mathcal M(\widetilde 1_\epsilon)(\sigma_2 + t i)
X^{\sigma_2 + t i} \ i \ dt
$$
\end{definition}
%%-/
noncomputable def I‚ÇÖ (SmoothingF : ‚Ñù ‚Üí ‚Ñù) (Œµ X œÉ‚ÇÇ : ‚Ñù) : ‚ÑÇ :=
  (1 / (2 * œÄ * I)) * (I * (‚à´ t in (-3)..3,
    SmoothedChebyshevIntegrand SmoothingF Œµ X (œÉ‚ÇÇ + t * I)))






theorem realDiff_of_complexDIff {f : ‚ÑÇ ‚Üí ‚ÑÇ} (s : ‚ÑÇ) (hf : DifferentiableAt ‚ÑÇ f s) :
    ContinuousAt (fun (x : ‚Ñù) ‚Ü¶ f (s.re + x * I)) s.im := by
  -- First, get continuity of f at s from differentiability
  have hf_cont : ContinuousAt f s := DifferentiableAt.continuousAt hf

  -- The function x ‚Ü¶ s.re + x * I is continuous
  have h_param : ContinuousAt (fun x : ‚Ñù ‚Ü¶ (s.re + x * I : ‚ÑÇ)) s.im := by
    apply ContinuousAt.add
    ¬∑ exact continuousAt_const
    ¬∑ apply ContinuousAt.mul
      ¬∑ refine Continuous.continuousAt ?_
        exact continuous_ofReal
      ¬∑ exact continuousAt_const

  -- Need to show that s.re + s.im * I = s
  have h_eq : (s.re : ‚ÑÇ) + (s.im : ‚ÑÇ) * I = s := by
    rw [‚Üê Complex.re_add_im s]
    simp

  -- Use the equation to transform the continuity
  rw [‚Üê h_eq] at hf_cont
  -- The composition of continuous functions is continuous
  exact ContinuousAt.comp hf_cont h_param

-- TODO : Move elsewhere (should be in Mathlib!) NOT NEEDED
theorem riemannZeta_bdd_on_vertical_lines {œÉ‚ÇÄ : ‚Ñù} (œÉ‚ÇÄ_gt : 1 < œÉ‚ÇÄ) (t : ‚Ñù) :
  ‚àÉ c > 0, ‚ÄñŒ∂ (œÉ‚ÇÄ + t * I)‚Äñ ‚â§ c :=
  by
    let s := œÉ‚ÇÄ + t * I
    let s_re : ‚ÑÇ  := œÉ‚ÇÄ

    have H : s.re = œÉ‚ÇÄ := by
          rw [add_re, ofReal_re, mul_re, ofReal_re, I_re, I_im]
          simp

    have non_neg : œÉ‚ÇÄ ‚â† 0 := by
      by_contra h
      rw [h] at œÉ‚ÇÄ_gt
      norm_cast at œÉ‚ÇÄ_gt

    have pos : s.re > 1 := by exact lt_of_lt_of_eq œÉ‚ÇÄ_gt (id (Eq.symm H))
    have pos_triv : s_re.re > 1 := by exact œÉ‚ÇÄ_gt

    have series := LSeries_one_eq_riemannZeta pos
    rw [‚Üê series]

    have identity : ‚àÄ(n : ‚Ñï), ‚ÄñLSeries.term 1 s n‚Äñ = 1 / n^œÉ‚ÇÄ := by
      unfold LSeries.term
      intro n
      by_cases h0 : n = 0
      ¬∑ simp [*]
      ¬∑ simp [*]
        push_neg at h0
        have C : n > 0 := by exact Nat.zero_lt_of_ne_zero h0
        have T :=  Complex.norm_natCast_cpow_of_pos C s
        rw [H] at T
        exact T

    have summable : Summable (fun (n : ‚Ñï) ‚Ü¶  ‚ÄñLSeries.term 1 s n‚Äñ) := by
      simp [identity]
      exact œÉ‚ÇÄ_gt

    have B := calc
      ‚Äñ‚àë' (n : ‚Ñï), LSeries.term 1 s n‚Äñ ‚â§ ‚àë' (n : ‚Ñï), ‚ÄñLSeries.term 1 s n‚Äñ := norm_tsum_le_tsum_norm summable
      _                                ‚â§ ‚àë' (n : ‚Ñï), (1 / ‚Üën^œÉ‚ÇÄ) := by simp [‚Üê identity]
      _                                ‚â§ norm (‚àë' (n : ‚Ñï), (1 / ‚Üën^œÉ‚ÇÄ) : ‚Ñù ) := by exact le_norm_self (‚àë' (n : ‚Ñï), 1 / ‚Üën ^ œÉ‚ÇÄ)
      _                                ‚â§ 1 + norm (‚àë' (n : ‚Ñï), (1 / ‚Üën^œÉ‚ÇÄ) : ‚Ñù ) := by linarith

    let c : ‚Ñù := 1 + norm (‚àë' (n : ‚Ñï), (1 / ‚Üën^œÉ‚ÇÄ) : ‚Ñù )

    have c_is_pos : c > 0 := by positivity
    use (1 + norm (‚àë' (n : ‚Ñï), (1 / ‚Üën^œÉ‚ÇÄ) : ‚Ñù ))
    exact ‚ü®c_is_pos, B‚ü©


theorem summable_real_iff_summable_coe_complex (f : ‚Ñï ‚Üí ‚Ñù) :
    Summable f ‚Üî Summable (fun n => (f n : ‚ÑÇ)) := by
  constructor

  ¬∑ intro ‚ü®s, hs‚ü©
    use (s : ‚ÑÇ)
    exact hasSum_ofReal.mpr hs

  ¬∑ intro ‚ü®s, hs‚ü©
    use s.re
    have h_re : HasSum (fun n => ((f n : ‚ÑÇ)).re) s.re :=
      by exact hasSum_re hs
    convert h_re using 1

theorem cast_pow_eq (n : ‚Ñï) (œÉ‚ÇÄ : ‚Ñù):
  (‚Üë((‚Üën : ‚Ñù) ^ œÉ‚ÇÄ) : ‚ÑÇ )  = (‚Üën : ‚ÑÇ) ^ (‚ÜëœÉ‚ÇÄ : ‚ÑÇ) := by
    have U : (‚Üën : ‚Ñù) ‚â• 0 := by exact Nat.cast_nonneg' n
    have endit := Complex.ofReal_cpow U œÉ‚ÇÄ
    exact endit

-- TODO : Move elsewhere (should be in Mathlib!) NOT NEEDED
theorem dlog_riemannZeta_bdd_on_vertical_lines {œÉ‚ÇÄ : ‚Ñù} (œÉ‚ÇÄ_gt : 1 < œÉ‚ÇÄ)  :
  ‚àÉ c > 0, ‚àÄ(t : ‚Ñù), ‚ÄñŒ∂' (œÉ‚ÇÄ + t * I) / Œ∂ (œÉ‚ÇÄ + t * I)‚Äñ ‚â§ c := by

    let s_re : ‚ÑÇ  := œÉ‚ÇÄ

    let new_const : ‚Ñù := 1 + (‚Üë(Norm.norm (‚àë' (n : ‚Ñï), ‚ÄñLSeries.term (fun x ‚Ü¶ Œõ x) (‚Üë s_re : ‚ÑÇ ) n‚Äñ)) : ‚Ñù )
    have new_const_is_pos : new_const > 0 := by positivity

    use new_const
    use new_const_is_pos
    intro t

    let s := œÉ‚ÇÄ + t * I

    have DD : (‚Üë s.re : ‚ÑÇ)  = s_re := by
      refine ofReal_inj.mpr ?_
      rw [add_re, ofReal_re, mul_re, ofReal_re, I_re, I_im]
      simp


    have L : s_re = œÉ‚ÇÄ := by rfl

    have H : s.re = œÉ‚ÇÄ := by
          rw [add_re, ofReal_re, mul_re, ofReal_re, I_re, I_im]
          simp

    have non_neg : œÉ‚ÇÄ ‚â† 0 := by
      by_contra h
      rw [h] at œÉ‚ÇÄ_gt
      norm_cast at œÉ‚ÇÄ_gt

    have pos : s.re > 1 := by exact lt_of_lt_of_eq œÉ‚ÇÄ_gt (id (Eq.symm H))
    have pos_triv : s_re.re > 1 := by exact œÉ‚ÇÄ_gt

    rw [‚Üê norm_neg, ‚Üê neg_div, ‚Üê ArithmeticFunction.LSeries_vonMangoldt_eq_deriv_riemannZeta_div pos]

    have identity0 : ‚àÄ(n : ‚Ñï), ‚ÄñLSeries.term 1 s n‚Äñ = 1 / n^œÉ‚ÇÄ := by
      unfold LSeries.term
      intro n
      by_cases h0 : n = 0
      ¬∑ simp [*]
      ¬∑ simp [*]
        push_neg at h0
        have C : n > 0 := by exact Nat.zero_lt_of_ne_zero h0
        have T :=  Complex.norm_natCast_cpow_of_pos C s
        rw [H] at T
        exact T

    have O : ‚àÄ(s : ‚ÑÇ), ‚àÄ(n : ‚Ñï), s.re = œÉ‚ÇÄ ‚Üí (‚Üë(‚ÄñLSeries.term (fun x ‚Ü¶ (Œõ x)) s n‚Äñ : ‚Ñù) : ‚ÑÇ) = LSeries.term (fun x ‚Ü¶ Œõ x) (‚Üë s.re : ‚ÑÇ ) n := by
      intro s
      intro n
      intro cond
--      have L : s_re = œÉ‚ÇÄ := by rfl
      by_cases h1 : (n = 0)
      ¬∑ simp [h1]
      ¬∑ push_neg at h1
        unfold LSeries.term
        simp [*]
        have U : |Œõ n| = Œõ n := abs_of_nonneg (ArithmeticFunction.vonMangoldt_nonneg)
        have R : n > 0 := by exact Nat.zero_lt_of_ne_zero h1
        rw [U]
        have Z := Complex.norm_natCast_cpow_of_pos R s
        rw [Z]
        rw [‚Üê L]
        --push_cast
        by_cases h : (Œõ n = 0)
        ¬∑ simp [h]
        ¬∑ norm_cast
          apply_fun (fun (w : ‚ÑÇ) ‚Ü¶ w * (‚Üë n : ‚ÑÇ)^s_re  / (Œõ n))
          ¬∑ simp [*]
            ring_nf
            rw [mul_comm]
            nth_rewrite 1 [mul_assoc]
            simp [*]
            have := cast_pow_eq n œÉ‚ÇÄ
            rw [this]
            simp [*]

          ¬∑ have G : (‚Üë n : ‚ÑÇ)^s_re  / (Œõ n) ‚â† 0 := by
              have T : (‚Üë n : ‚ÑÇ)^s_re ‚â† 0 := by
                have T : n > 0 := by exact R
                have M : ‚àÉ(m : ‚Ñï), n = m + 1 := by exact Nat.exists_eq_succ_of_ne_zero h1
                let ‚ü®m, pf‚ü© := M
                have U := Complex.natCast_add_one_cpow_ne_zero m s_re
                rw [pf]
                push_cast
                exact U
              refine div_ne_zero T ?_
              push_neg at h
              norm_cast
            have U := by exact mul_left_injective‚ÇÄ G
            have T : (fun (x : ‚ÑÇ) ‚Ü¶ x * (‚Üë n : ‚ÑÇ)^s_re  / (Œõ n)) = (fun (x : ‚ÑÇ) ‚Ü¶ x * ((‚Üë n : ‚ÑÇ)^s_re  / (Œõ n))) := by funext x; exact mul_div_assoc x (‚Üën ^ s_re) ‚Üë(Œõ n)
            simp [‚ÜêT] at U
            exact U

    have K : (fun (n : ‚Ñï) ‚Ü¶ ‚Üë(‚ÄñLSeries.term (fun x ‚Ü¶ (Œõ x)) s n‚Äñ : ‚Ñù)) = (fun (n : ‚Ñï) ‚Ü¶ (LSeries.term (fun x ‚Ü¶ Œõ x) (‚Üë s.re : ‚ÑÇ )  n )) := by
      funext n
      rw [O s n H]

    have K1 : (fun (n : ‚Ñï) ‚Ü¶ ‚Üë(‚ÄñLSeries.term (fun x ‚Ü¶ (Œõ x)) (‚Üë s.re : ‚ÑÇ) n‚Äñ : ‚Ñù)) = (fun (n : ‚Ñï) ‚Ü¶ (LSeries.term (fun x ‚Ü¶ Œõ x) (‚Üë s.re : ‚ÑÇ )  n )) := by
      funext n
      rw [O (‚Üë s.re : ‚ÑÇ) n H]
      simp [*]

    have D2 :  (fun (n : ‚Ñï) ‚Ü¶ ‚Üë(‚ÄñLSeries.term (fun x ‚Ü¶ (Œõ x)) s n‚Äñ : ‚Ñù)) = (fun (n : ‚Ñï) ‚Ü¶ ‚Üë(‚ÄñLSeries.term (fun x ‚Ü¶ (Œõ x)) (‚Üë s.re : ‚ÑÇ)  n‚Äñ : ‚Ñù)) := by
      simp [‚Üê K]

    have S : Summable (fun n ‚Ü¶ (‚Üë(‚ÄñLSeries.term (fun x ‚Ü¶ Œõ x) s n‚Äñ : ‚Ñù) : ‚Ñù  )) := by
      apply (summable_real_iff_summable_coe_complex (fun n ‚Ü¶ (‚Üë(‚ÄñLSeries.term (fun x ‚Ü¶ Œõ x) s n‚Äñ : ‚Ñù) : ‚Ñù  ))).mpr
      rw [K]
      have T := ArithmeticFunction.LSeriesSummable_vonMangoldt (pos_triv)
      have U : s_re = s.re := by exact congrFun (congrArg Complex.mk (id (Eq.symm H))) 0
      simp [‚Üê U]
      exact T

    have C := calc
      ‚Äñ‚àë' (n : ‚Ñï), (LSeries.term (fun x ‚Ü¶ Œõ x) s n)‚Äñ ‚â§ ‚àë' (n : ‚Ñï), ‚ÄñLSeries.term (fun x ‚Ü¶ Œõ x) s n‚Äñ := norm_tsum_le_tsum_norm S
--      _                                              = ‚àë' (n : ‚Ñï), LSeries.term (fun x ‚Ü¶ Œõ x) (‚Üë s.re : ‚ÑÇ )  n) := by simp [K]
      _                                              ‚â§ norm (‚àë' (n : ‚Ñï), ‚ÄñLSeries.term (fun x ‚Ü¶ Œõ x) s n‚Äñ) := by exact le_norm_self (‚àë' (n : ‚Ñï), ‚ÄñLSeries.term (fun x ‚Ü¶ ‚Üë(Œõ x)) s n‚Äñ)
      _                                              = norm (‚àë' (n : ‚Ñï), ‚ÄñLSeries.term (fun x ‚Ü¶ Œõ x) (‚Üë s.re : ‚ÑÇ) n‚Äñ) := by simp [D2]
      _                                              ‚â§ 1 + norm (‚àë' (n : ‚Ñï), ‚ÄñLSeries.term (fun x ‚Ü¶ Œõ x) ( ‚Üë s.re : ‚ÑÇ) n‚Äñ ) := by linarith
      _                                              = new_const := by rw [DD]

    exact C


theorem analyticAt_riemannZeta {s : ‚ÑÇ} (s_ne_one : s ‚â† 1) :
  AnalyticAt ‚ÑÇ riemannZeta s := by
  have : DifferentiableAt ‚ÑÇ riemannZeta s := differentiableAt_riemannZeta s_ne_one
  have exclude := eventually_ne_nhds s_ne_one
  unfold Filter.Eventually at exclude
  have : AnalyticAt ‚ÑÇ riemannZeta s := by
      refine Complex.analyticAt_iff_eventually_differentiableAt.mpr ?_
      unfold Filter.Eventually
      have T : {x | (fun x ‚Ü¶ x ‚â† 1) x} ‚äÜ {x | (fun z ‚Ü¶ DifferentiableAt ‚ÑÇ Œ∂ z) x} := by
        intro x
        simp [*]
        push_neg
        intro hyp_x
        exact differentiableAt_riemannZeta hyp_x
      apply mem_nhds_iff.mpr
      use {x | (fun x ‚Ü¶ x ‚â† 1) x}
      constructor
      ¬∑ exact T
      ¬∑ constructor
        ¬∑ exact isOpen_ne
        ¬∑ exact s_ne_one

  exact this

/-%%
\begin{lemma}[dlog_riemannZeta_bdd_on_vertical_lines']\label{dlog_riemannZeta_bdd_on_vertical_lines'}\lean{dlog_riemannZeta_bdd_on_vertical_lines'}\leanok
For $\sigma_0 > 1$, there exists a constant $C > 0$ such that
$$
\forall t \in \R, \quad
\left\| \frac{\zeta'(\sigma_0 + t i)}{\zeta(\sigma_0 + t i)} \right\| \leq C.
$$
\end{lemma}
%%-/
theorem dlog_riemannZeta_bdd_on_vertical_lines' {œÉ‚ÇÄ : ‚Ñù} (œÉ‚ÇÄ_gt : 1 < œÉ‚ÇÄ) :
  ‚àÉ C > 0, ‚àÄ (t : ‚Ñù), ‚ÄñŒ∂' (œÉ‚ÇÄ + t * I) / Œ∂ (œÉ‚ÇÄ + t * I)‚Äñ ‚â§ C :=
  dlog_riemannZeta_bdd_on_vertical_lines œÉ‚ÇÄ_gt
/-%%
\begin{proof}\uses{LogDerivativeDirichlet}\leanok
Write as Dirichlet series and estimate trivially using Theorem \ref{LogDerivativeDirichlet}.
\end{proof}
%%-/


theorem differentiableAt_deriv_riemannZeta {s : ‚ÑÇ} (s_ne_one : s ‚â† 1) :
    DifferentiableAt ‚ÑÇ Œ∂' s := by
      have U := (analyticAt_riemannZeta s_ne_one).deriv.differentiableAt
      exact U

/-%%
\begin{lemma}[SmoothedChebyshevPull1_aux_integrable]\label{SmoothedChebyshevPull1_aux_integrable}\lean{SmoothedChebyshevPull1_aux_integrable}\leanok
The integrand $$\zeta'(s)/\zeta(s)\mathcal{M}(\widetilde{1_{\epsilon}})(s)X^{s}$$
is integrable on the contour $\sigma_0 + t i$ for $t \in \R$ and $\sigma_0 > 1$.
\end{lemma}
%%-/
theorem SmoothedChebyshevPull1_aux_integrable {SmoothingF : ‚Ñù ‚Üí ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    {X : ‚Ñù} (X_gt : 3 < X)
    {œÉ‚ÇÄ : ‚Ñù} (œÉ‚ÇÄ_gt : 1 < œÉ‚ÇÄ) (œÉ‚ÇÄ_le_2 : œÉ‚ÇÄ ‚â§ 2)
--    (holoOn : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF Œµ X) (Icc œÉ‚ÇÄ 2 √ó‚ÑÇ univ \ {1}))
    (suppSmoothingF : support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ (x : ‚Ñù) in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF)
    :
    Integrable (fun (t : ‚Ñù) ‚Ü¶
      SmoothedChebyshevIntegrand SmoothingF Œµ X (œÉ‚ÇÄ + (t : ‚ÑÇ) * I)) volume := by
  obtain ‚ü®C, C_pos, hC‚ü© := dlog_riemannZeta_bdd_on_vertical_lines' œÉ‚ÇÄ_gt
  let c : ‚Ñù := C * X ^ œÉ‚ÇÄ
  have : ‚àÄ·µê t ‚àÇvolume, ‚Äñ(fun (t : ‚Ñù) ‚Ü¶ (- deriv riemannZeta (œÉ‚ÇÄ + (t : ‚ÑÇ) * I)) /
    riemannZeta (œÉ‚ÇÄ + (t : ‚ÑÇ) * I) *
    (X : ‚ÑÇ) ^ (œÉ‚ÇÄ + (t : ‚ÑÇ) * I)) t‚Äñ ‚â§ c := by
    apply Filter.Eventually.of_forall
    intro t
    simp only [Complex.norm_mul, norm_neg, c]
    gcongr
    ¬∑ convert hC t using 1
      simp
    ¬∑ rw [Complex.norm_cpow_eq_rpow_re_of_nonneg]
      ¬∑ simp
      ¬∑ linarith
      ¬∑ simp only [add_re, ofReal_re, mul_re, I_re, mul_zero, ofReal_im, I_im, mul_one, sub_self,
        add_zero, ne_eq, c]
        linarith
  convert (SmoothedChebyshevDirichlet_aux_integrable ContDiffSmoothingF SmoothingFnonneg
    suppSmoothingF mass_one Œµ_pos Œµ_lt_one œÉ‚ÇÄ_gt œÉ‚ÇÄ_le_2).bdd_mul' (c := c) ?_ this using 2
  ¬∑ unfold SmoothedChebyshevIntegrand
    ring
  ¬∑ apply Continuous.aestronglyMeasurable
    rw [continuous_iff_continuousOn_univ]
    intro t _
    let s := œÉ‚ÇÄ + (t : ‚ÑÇ) * I
    have s_ne_one : s ‚â† 1 := by
      intro h
      -- If œÉ‚ÇÄ + t * I = 1, then taking real parts gives œÉ‚ÇÄ = 1
      have : œÉ‚ÇÄ = 1 := by
        have := congr_arg Complex.re h
        simp only [add_re, ofReal_re, mul_re, I_re, mul_zero, ofReal_im, I_im, mul_one,
          sub_self, add_zero, one_re, s] at this
        exact this
      -- But this contradicts 1 < œÉ‚ÇÄ
      linarith [œÉ‚ÇÄ_gt]
    apply ContinuousAt.continuousWithinAt
    apply ContinuousAt.mul
    ¬∑ have diffŒ∂ := differentiableAt_riemannZeta s_ne_one
      apply ContinuousAt.div
      ¬∑ apply ContinuousAt.neg
        have : DifferentiableAt ‚ÑÇ (fun s ‚Ü¶ deriv riemannZeta s) s :=
          differentiableAt_deriv_riemannZeta s_ne_one
        convert realDiff_of_complexDIff (s := œÉ‚ÇÄ + (t : ‚ÑÇ) * I) this <;> simp
      ¬∑ convert realDiff_of_complexDIff (s := œÉ‚ÇÄ + (t : ‚ÑÇ) * I) diffŒ∂ <;> simp
      ¬∑ apply riemannZeta_ne_zero_of_one_lt_re
        simp [œÉ‚ÇÄ_gt]
    ¬∑ -- The function x ‚Ü¶ œÉ‚ÇÄ + x * I is continuous
      have h_param : ContinuousAt (fun x : ‚Ñù ‚Ü¶ (‚ÜëœÉ‚ÇÄ + ‚Üëx * I : ‚ÑÇ)) t := by
        apply ContinuousAt.add
        ¬∑ exact continuousAt_const
        ¬∑ apply ContinuousAt.mul
          ¬∑ exact continuous_ofReal.continuousAt
          ¬∑ exact continuousAt_const

      -- The complex power function z ‚Ü¶ X^z is continuous (assuming X > 0)
      have h_pow : ContinuousAt (fun z : ‚ÑÇ ‚Ü¶ (‚ÜëX : ‚ÑÇ) ^ z) (‚ÜëœÉ‚ÇÄ + ‚Üët * I) := by
        apply continuousAt_const_cpow
        simp only [ne_eq, ofReal_eq_zero, s]
        linarith

      -- Composition of continuous functions
      exact ContinuousAt.comp h_pow h_param

/-%%
\begin{proof}\uses{MellinOfSmooth1b, SmoothedChebyshevDirichlet_aux_integrable}\leanok
The $\zeta'(s)/\zeta(s)$ term is bounded, as is $X^s$, and the smoothing function
$\mathcal{M}(\widetilde{1_{\epsilon}})(s)$
decays like $1/|s|^2$ by Theorem \ref{MellinOfSmooth1b}.
Actually, we already know that
$\mathcal{M}(\widetilde{1_{\epsilon}})(s)$
is integrable from Theorem \ref{SmoothedChebyshevDirichlet_aux_integrable},
so we should just need to bound the rest.
\end{proof}
%%-/

/-%%
\begin{lemma}[BddAboveOnRect]\label{BddAboveOnRect}\lean{BddAboveOnRect}\leanok
Let $g : \C \to \C$ be a holomorphic function on a rectangle, then $g$ is bounded above on the rectangle.
\end{lemma}
%%-/
lemma BddAboveOnRect {g : ‚ÑÇ ‚Üí ‚ÑÇ} {z w : ‚ÑÇ} (holoOn : HolomorphicOn g (z.Rectangle w)) :
    BddAbove (norm ‚àò g '' (z.Rectangle w)) := by
  sorry
/-%%
\begin{proof}
Use the compactness of the rectangle and the fact that holomorphic functions are continuous.
\end{proof}
%%-/


/-%%
\begin{theorem}[SmoothedChebyshevPull1]\label{SmoothedChebyshevPull1}\lean{SmoothedChebyshevPull1}\leanok
We have that
$$\psi_{\epsilon}(X) =
\mathcal{M}(\widetilde{1_{\epsilon}})(1)
X^{1} +
 \frac{1}{2\pi i}\int_{\text{curve}}\frac{-\zeta'(s)}{\zeta(s)}
\mathcal{M}(\widetilde{1_{\epsilon}})(s)
X^{s}ds.$$
\end{theorem}
%%-/

theorem SmoothedChebyshevPull1 {SmoothingF : ‚Ñù ‚Üí ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    (X : ‚Ñù) (X_gt : 3 < X)
    {T : ‚Ñù} (T_pos : 0 < T) {œÉ‚ÇÅ : ‚Ñù}
    (œÉ‚ÇÅ_pos : 0 < œÉ‚ÇÅ) (œÉ‚ÇÅ_lt_one : œÉ‚ÇÅ < 1)
    (holoOn : HolomorphicOn (Œ∂' / Œ∂) ((Icc œÉ‚ÇÅ 2)√ó‚ÑÇ (Icc (-T) T) \ {1}))
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF) :
    SmoothedChebyshev SmoothingF Œµ X =
      I‚ÇÅ SmoothingF Œµ X T -
      I‚ÇÇ SmoothingF Œµ T X œÉ‚ÇÅ +
      I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ +
      I‚Çà SmoothingF Œµ T X œÉ‚ÇÅ +
      I‚Çâ SmoothingF Œµ X T
      + ùìú ((Smooth1 SmoothingF Œµ) ¬∑) 1 * X := by
  unfold SmoothedChebyshev
  unfold VerticalIntegral'
  rw [verticalIntegral_split_three (a := -T) (b := T)]
  swap
  have X_eq_gt_one : 1 < 1 + (Real.log X)‚Åª¬π := by
    nth_rewrite 1 [‚Üê add_zero 1]
    refine add_lt_add_of_le_of_lt ?_ ?_
    rfl
    rw[inv_pos, ‚Üê Real.log_one]
    apply Real.log_lt_log
    norm_num
    linarith
  have holoIntegrand : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF Œµ X)
      (Ico (1 + (Real.log X)‚Åª¬π) 2 √ó‚ÑÇ univ \ {1}) := by
    unfold SmoothedChebyshevIntegrand HolomorphicOn
    refine DifferentiableOn.mul ?_ ?_
    refine DifferentiableOn.mul ?_ ?_
    have : (fun s ‚Ü¶ -Œ∂' s / Œ∂ s) = (fun s ‚Ü¶ -(Œ∂' s / Œ∂ s)) := by
      refine funext ?_
      intro x
      exact neg_div (Œ∂ x) (Œ∂' x)
    rw[this]
    refine DifferentiableOn.neg ?_
    unfold DifferentiableOn
    intro s s_location
    rw[Set.mem_diff, Complex.mem_reProdIm] at s_location
    obtain ‚ü®‚ü®sReIn, sImIn‚ü©, sOut‚ü© := s_location
    obtain ‚ü®A, A_inter, Tlb, Tlb_inter, holoOnTemp‚ü© := LogDerivZetaHolcLargeT
    have : ‚àÉ (T : ‚Ñù), Tlb < T ‚àß |s.im| < T := by
      let T : ‚Ñù := 1 + max Tlb |s.im|
      use T
      have temp : Tlb < T := by
        dsimp[T]
        nth_rewrite 1 [‚Üê zero_add Tlb]
        refine add_lt_add_of_lt_of_le ?_ ?_
        norm_num
        exact le_max_left Tlb |s.im|
      have : |s.im| < T := by
        dsimp[T]
        nth_rewrite 1 [‚Üê zero_add |s.im|]
        refine add_lt_add_of_lt_of_le ?_ ?_
        norm_num
        exact le_max_right Tlb |s.im|
      exact ‚ü®temp, this‚ü©
    obtain ‚ü®T, Tbounds‚ü© := this
    have holoOnTemp : HolomorphicOn (fun s ‚Ü¶ Œ∂' s / Œ∂ s) (Ioo (1 - A / Real.log T ^ 9) 2 √ó‚ÑÇ Ioo (-T) T \ {1}) := by exact holoOnTemp T Tbounds.1
    unfold HolomorphicOn at holoOnTemp
    unfold DifferentiableOn at holoOnTemp
    have sInBiggerBox : s ‚àà Ioo (1 - A / Real.log T ^ 9) 2 √ó‚ÑÇ Ioo (-T) T \ {1} := by
      rw[Set.mem_diff, Complex.mem_reProdIm]
      have temp : s.re ‚àà Ioo (1 - A / Real.log T ^ 9) 2 := by
        have : 1 - A / Real.log T ^ 9 < s.re := by
          have : 1 - A / Real.log T ^ 9 < 1 + (Real.log X)‚Åª¬π := by
            have : 0 < A / Real.log T ^ 9 := by
              refine div_pos ?_ ?_
              exact A_inter.1
              apply pow_pos
              rw[‚Üê Real.log_one]
              apply Real.log_lt_log
              positivity
              linarith
            have : 0 < (Real.log X)‚Åª¬π := by
              rw[inv_pos, ‚Üê Real.log_one]
              apply Real.log_lt_log
              positivity
              linarith
            linarith
          exact gt_of_ge_of_gt sReIn.1 this
        exact ‚ü®this, sReIn.2‚ü©
      have : s.im ‚àà Ioo (-T) T := by
        obtain ‚ü®_, abs_sIm_bound‚ü© := Tbounds
        exact ‚ü®by exact neg_lt_of_abs_lt abs_sIm_bound, by exact lt_of_abs_lt abs_sIm_bound‚ü©
      exact ‚ü®‚ü®temp, this‚ü©, sOut‚ü©
    have : DifferentiableWithinAt ‚ÑÇ (fun s ‚Ü¶ Œ∂' s / Œ∂ s) (Ioo (1 - A / Real.log T ^ 9) 2 √ó‚ÑÇ Ioo (-T) T \ {1}) s := by exact holoOnTemp s sInBiggerBox
    refine DifferentiableAt.differentiableWithinAt ?_
    have h_open : IsOpen (Ioo (1 - A / Real.log T ^ 9) 2 √ó‚ÑÇ Ioo (-T) T \ {1}) := by
      apply IsOpen.sdiff
      refine IsOpen.reProdIm (by exact isOpen_Ioo) (by exact isOpen_Ioo)
      exact isClosed_singleton
    have h_mem : s ‚àà Ioo (1 - A / Real.log T ^ 9) 2 √ó‚ÑÇ Ioo (-T) T \ {1} := sInBiggerBox
    exact this.differentiableAt (h_open.mem_nhds h_mem)
    unfold DifferentiableOn
    intro s s_location
    rw[Set.mem_diff, Complex.mem_reProdIm] at s_location
    obtain ‚ü®‚ü®sReIn, sImIn‚ü©, sOut‚ü© := s_location
    refine DifferentiableAt.differentiableWithinAt ?_
    have ŒµInter : Œµ ‚àà Ioo 0 1 := by exact ‚ü®Œµ_pos, Œµ_lt_one‚ü©
    have hs : 0 < s.re := by
      have : 1 + (Real.log X)‚Åª¬π ‚â§ s.re := by exact sReIn.1
      linarith
    exact Smooth1MellinDifferentiable ContDiffSmoothingF suppSmoothingF ŒµInter SmoothingFnonneg
      mass_one hs
    intro s hs
    apply DifferentiableAt.differentiableWithinAt
    cases' hs with h_in h_not_one
    unfold HPow.hPow instHPow
    simp
    apply DifferentiableAt.const_cpow
    exact differentiableAt_id'
    refine Or.inl ?_
    refine ne_zero_of_re_pos ?_
    rw[ofReal_re]
    positivity
    -- apply add_pos (by positivity)
    -- rw[inv_pos, ‚Üê Real.log_one]
    -- apply Real.log_lt_log (by positivity) (by linarith)
  have logX_gt : 1 + (Real.log X)‚Åª¬π ‚â§ 2 := by
    sorry
    -- apply add_lt_add_left
    -- apply inv_lt_one_of_pos
    -- rw[Real.log_one]
    -- exact Real.log_pos (by positivity)
    -- exact X_gt

  exact SmoothedChebyshevPull1_aux_integrable Œµ_pos Œµ_lt_one X_gt X_eq_gt_one logX_gt
    suppSmoothingF SmoothingFnonneg mass_one ContDiffSmoothingF


  have temp : ‚Üë(1 + (Real.log X)‚Åª¬π) = (1 : ‚ÑÇ) + ‚Üë(Real.log X)‚Åª¬π := by field_simp
  repeat rw[smul_eq_mul]
  unfold I‚ÇÅ
  rw[temp, mul_add, mul_add, add_assoc, sub_eq_add_neg]
  nth_rewrite 4 [add_assoc]
  nth_rewrite 3 [add_assoc]
  nth_rewrite 2 [add_assoc]
  rw[add_assoc, add_left_cancel_iff, add_assoc]
  nth_rewrite 7 [add_comm]
  rw[‚Üê add_assoc]
  unfold I‚Çâ
  rw[add_right_cancel_iff, ‚Üê add_right_inj (1 / (2 * ‚ÜëœÄ * I) * -VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) (1 + (Real.log X)‚Åª¬π) (-T) T), ‚Üê mul_add, ‚Üê sub_eq_neg_add, sub_self, mul_zero]
  unfold VIntegral I‚ÇÇ I‚ÇÉ‚Çá I‚Çà
  rw[smul_eq_mul, temp, ‚Üê add_assoc, ‚Üê add_assoc]
  nth_rewrite 2 [div_mul_comm]
  rw[mul_one, ‚Üê neg_div, ‚Üê mul_neg]
  nth_rewrite 2 [‚Üê one_div_mul_eq_div]
  repeat rw[‚Üê mul_add]
  let fTempRR : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ fun y ‚Ü¶ SmoothedChebyshevIntegrand SmoothingF Œµ X ((x : ‚Ñù) + (y : ‚Ñù) * I)
  let fTempC : ‚ÑÇ ‚Üí ‚ÑÇ := fun z ‚Ü¶ fTempRR z.re z.im
  have : ‚à´ (y : ‚Ñù) in -T..T, SmoothedChebyshevIntegrand SmoothingF Œµ X (1 + ‚Üë(Real.log X)‚Åª¬π + ‚Üëy * I) =
    ‚à´ (y : ‚Ñù) in -T..T, fTempRR (1 + (Real.log X)‚Åª¬π) y := by
    unfold fTempRR
    rw[temp]
  rw[this]
  have : ‚à´ (œÉ : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, SmoothedChebyshevIntegrand SmoothingF Œµ X (‚ÜëœÉ - ‚ÜëT * I) =
    ‚à´ (x : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, fTempRR x (-T) := by
    unfold fTempRR
    rw[Complex.ofReal_neg, neg_mul]
    rfl
  rw[this]
  have : ‚à´ (t : ‚Ñù) in -T..T, SmoothedChebyshevIntegrand SmoothingF Œµ X (‚ÜëœÉ‚ÇÅ + ‚Üët * I) =
    ‚à´ (y : ‚Ñù) in -T..T, fTempRR œÉ‚ÇÅ y := by rfl
  rw[this]
  have : ‚à´ (œÉ : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, SmoothedChebyshevIntegrand SmoothingF Œµ X (‚ÜëœÉ + ‚ÜëT * I) =
    ‚à´ (x : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, fTempRR x T := by rfl
  rw[this]
  repeat rw[‚Üê add_assoc]
  have : (((I * -‚à´ (y : ‚Ñù) in -T..T, fTempRR (1 + (Real.log X)‚Åª¬π) y) +
    -‚à´ (x : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, fTempRR x (-T)) +
    I * ‚à´ (y : ‚Ñù) in -T..T, fTempRR œÉ‚ÇÅ y) +
    ‚à´ (x : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, fTempRR x T = -1 * RectangleIntegral fTempC ((1 : ‚Ñù) + (Real.log X)‚Åª¬π + T * I) (œÉ‚ÇÅ - T * I) := by
    unfold RectangleIntegral
    rw[HIntegral_symm, VIntegral_symm]
    nth_rewrite 2 [HIntegral_symm, VIntegral_symm]
    unfold HIntegral VIntegral
    repeat rw[smul_eq_mul]
    repeat rw[add_re]
    repeat rw[add_im]
    repeat rw[sub_re]
    repeat rw[sub_im]
    repeat rw[mul_re]
    repeat rw[mul_im]
    repeat rw[ofReal_re]
    repeat rw[ofReal_im]
    rw[I_re, I_im, mul_zero, zero_mul, mul_one]
    ring_nf
    unfold fTempC
    have : ‚à´ (y : ‚Ñù) in -T..T, fTempRR (I * ‚Üëy + ‚ÜëœÉ‚ÇÅ).re (I * ‚Üëy + ‚ÜëœÉ‚ÇÅ).im =
      ‚à´ (y : ‚Ñù) in -T..T, fTempRR œÉ‚ÇÅ y := by simp
    rw[this]
    have : ‚à´ (y : ‚Ñù) in -T..T, fTempRR (I * ‚Üëy + ‚Üë(1 + (Real.log X)‚Åª¬π)).re (I * ‚Üëy + ‚Üë(1 + (Real.log X)‚Åª¬π)).im =
      ‚à´ (y : ‚Ñù) in -T..T, fTempRR (1 + (Real.log X)‚Åª¬π) y := by simp
    rw[this]
    have : ‚à´ (x : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, fTempRR (I * ‚ÜëT + ‚Üëx).re (I * ‚ÜëT + ‚Üëx).im =
      ‚à´ (x : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, fTempRR x T := by simp
    rw[this]
    have : ‚à´ (x : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, fTempRR (I * ‚Üë(-T) + ‚Üëx).re (I * ‚Üë(-T) + ‚Üëx).im =
      ‚à´ (x : ‚Ñù) in œÉ‚ÇÅ..1 + (Real.log X)‚Åª¬π, fTempRR x (-T) := by simp
    rw[this]
    ring_nf
  rw[this, neg_one_mul, div_mul_comm, mul_one, ‚Üê add_right_inj (RectangleIntegral fTempC (1 + ‚Üë(Real.log X)‚Åª¬π + ‚ÜëT * I) (‚ÜëœÉ‚ÇÅ - ‚ÜëT * I) / (2 * ‚ÜëœÄ * I)), ‚Üê add_assoc]
  field_simp
  rw[rectangleIntegral_symm]
  have : RectangleIntegral fTempC (‚ÜëœÉ‚ÇÅ - ‚ÜëT * I) (1 + 1 / ‚Üë(Real.log X) + ‚ÜëT * I) / (2 * ‚ÜëœÄ * I) =
    RectangleIntegral' fTempC (œÉ‚ÇÅ - T * I) (1 + ‚Üë(Real.log X)‚Åª¬π + T * I) := by
    unfold RectangleIntegral'
    rw[smul_eq_mul]
    field_simp
  rw[this]

  let holoMatch : ‚ÑÇ ‚Üí ‚ÑÇ := fun z ‚Ü¶ (fTempC z - (ùìú (fun x ‚Ü¶ ‚Üë(Smooth1 SmoothingF Œµ x)) 1 * ‚ÜëX) / (z - 1))
  have inv_log_X_pos: 0 < (Real.log X)‚Åª¬π := by
    rw[inv_pos, ‚Üê Real.log_one]
    apply Real.log_lt_log (by positivity) (by linarith)
  have pInRectangleInterior : (Rectangle (œÉ‚ÇÅ - ‚ÜëT * I) (1 + (Real.log X)‚Åª¬π + T * I) ‚àà nhds 1) := by
    refine rectangle_mem_nhds_iff.mpr ?_
    refine mem_reProdIm.mpr ?_
    have : re 1 = 1 := by rfl
    rw[this]
    have : im 1 = 0 := by rfl
    rw[this]
    repeat rw[sub_re]
    repeat rw[sub_im]
    repeat rw[add_re]
    repeat rw[add_im]
    rw[mul_re, mul_im, I_re, I_im]
    repeat rw[ofReal_re]
    repeat rw[ofReal_im]
    ring_nf
    have temp : 1 ‚àà uIoo œÉ‚ÇÅ (re 1 + (Real.log X)‚Åª¬π) := by
      have : re 1 = 1 := by rfl
      rw[this]
      unfold uIoo
      have : min œÉ‚ÇÅ (1 + (Real.log X)‚Åª¬π) = œÉ‚ÇÅ := by exact min_eq_left (by linarith)
      rw[this]
      have : max œÉ‚ÇÅ (1 + (Real.log X)‚Åª¬π) = 1 + (Real.log X)‚Åª¬π := by exact max_eq_right (by linarith)
      rw[this]
      refine mem_Ioo.mpr ?_
      exact ‚ü®œÉ‚ÇÅ_lt_one, (by linarith)‚ü©
    have : 0 ‚àà uIoo (-T) (T + im 1) := by
      have : im 1 = 0 := by rfl
      rw[this, add_zero]
      unfold uIoo
      have : min (-T) T = -T := by exact min_eq_left (by linarith)
      rw[this]
      have : max (-T) T = T := by exact max_eq_right (by linarith)
      rw[this]
      refine mem_Ioo.mpr ?_
      exact ‚ü®(by linarith), (by linarith)‚ü©
    exact ‚ü®temp, this‚ü©
  --TODO:
  have holoMatchHoloOn : HolomorphicOn holoMatch (Rectangle (œÉ‚ÇÅ - ‚ÜëT * I) (1 + (Real.log X)‚Åª¬π + T * I) \ {1}) := by
    unfold HolomorphicOn holoMatch
    refine DifferentiableOn.sub ?_ ?_
    sorry
    refine DifferentiableOn.mul ?_ ?_
    unfold DifferentiableOn
    intro x x_location
    rw[Set.mem_diff] at x_location
    obtain ‚ü®xInRect, xOut‚ü© := x_location
    sorry
    sorry
  --TODO:
  have holoMatchBddAbove : BddAbove (norm ‚àò holoMatch '' (Rectangle (œÉ‚ÇÅ - ‚ÜëT * I) (1 + (Real.log X)‚Åª¬π + T * I) \ {1})) := by sorry --should be able to do with lemmas from workshop
  obtain ‚ü®g, gHolo_Eq‚ü© := existsDifferentiableOn_of_bddAbove pInRectangleInterior holoMatchHoloOn holoMatchBddAbove
  obtain ‚ü®gHolo, gEq‚ü© := gHolo_Eq

  have zRe_le_wRe : (œÉ‚ÇÅ - ‚ÜëT * I).re ‚â§ (1 + (Real.log X)‚Åª¬π + T * I).re := by
    repeat rw[sub_re]
    repeat rw[add_re]
    repeat rw[mul_re]
    rw[I_re, I_im]
    repeat rw[ofReal_re]
    repeat rw[ofReal_im]
    ring_nf
    have : re 1 = 1 := by rfl
    rw[this]
    linarith
  have zIm_le_wIm : (œÉ‚ÇÅ - ‚ÜëT * I).im ‚â§ (1 + (Real.log X)‚Åª¬π + T * I).im := by
    repeat rw[sub_im]
    repeat rw[add_im]
    repeat rw[mul_im]
    rw[I_re, I_im]
    repeat rw[ofReal_re]
    repeat rw[ofReal_im]
    ring_nf
    have : im 1 = 0 := by rfl
    rw[this]
    linarith
  exact ResidueTheoremOnRectangleWithSimplePole zRe_le_wRe zIm_le_wIm pInRectangleInterior gHolo gEq


lemma interval_membership (r : ‚Ñù)(a b: ‚Ñù)(h1 : r ‚àà Set.Icc (min a b) (max a b)) (h2 : a < b) :
  a ‚â§ r ‚àß r ‚â§ b := by
  -- Since a < b, we have min(a,b) = a and max(a,b) = b
  have min_eq : min a b = a := min_eq_left (le_of_lt h2)
  have max_eq : max a b = b := max_eq_right (le_of_lt h2)
  rw [min_eq, max_eq] at h1
  rw [‚Üê @mem_Icc]
  exact h1

/-%%
\begin{proof}
\uses{SmoothedChebyshev, RectangleIntegral, ResidueMult, riemannZetaLogDerivResidue,
SmoothedChebyshevPull1_aux_integrable, BddAboveOnRect,
I‚ÇÅ, I‚ÇÇ, I‚ÇÉ‚Çá, I‚Çà, I‚Çâ}
Pull rectangle contours and evaluate the pole at $s=1$.
\end{proof}
%%-/

/-%%
Next pull contours to another box.
\begin{lemma}[SmoothedChebyshevPull2]\label{SmoothedChebyshevPull2}\lean{SmoothedChebyshevPull2}\leanok
We have that
$$\psi_{\epsilon}(X) =
\mathcal{M}(\widetilde{1_{\epsilon}})(1)
X^{1} +
  \frac{1}{2\pi i}\int_{\text{curve}_2}\frac{-\zeta'(s)}{\zeta(s)}
\mathcal{M}(\widetilde{1_{\epsilon}})(s)
X^{s}ds
$$
\end{lemma}
%%-/

-- use intervalIntegral.integral_add_adjacent_intervals
lemma verticalIntegral_split_three_finite (s a b e œÉ: ‚Ñù) (f : ‚ÑÇ ‚Üí ‚Ñù)(hf : Integrable (fun t : ‚Ñù ‚Ü¶ f (œÉ + t * I))) :
    VerticalIntegral f œÉ = VIntegral f œÉ s a + VIntegral f œÉ a b + VIntegral f œÉ b e := by sorry

theorem SmoothedChebyshevPull2 {SmoothingF : ‚Ñù ‚Üí ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ) (Œµ_lt_one : Œµ < 1)
    (X : ‚Ñù) (_ : 3 < X)
    {T : ‚Ñù} (T_pos : 0 < T) {œÉ‚ÇÅ œÉ‚ÇÇ : ‚Ñù}
    (œÉ‚ÇÇ_pos : 0 < œÉ‚ÇÇ) (œÉ‚ÇÅ_lt_one : œÉ‚ÇÅ < 1)
    (œÉ‚ÇÇ_lt_œÉ‚ÇÅ : œÉ‚ÇÇ < œÉ‚ÇÅ)
    (holoOn : HolomorphicOn (Œ∂' / Œ∂) ((Icc œÉ‚ÇÅ 2)√ó‚ÑÇ (Icc (-T) T) \ {1}))
    (holoOn2 : HolomorphicOn (SmoothedChebyshevIntegrand SmoothingF Œµ X)
      (Icc œÉ‚ÇÇ 2 √ó‚ÑÇ Icc (-3) 3 \ {1}))
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1) :
    I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ =
      I‚ÇÉ SmoothingF Œµ T X œÉ‚ÇÅ -
      I‚ÇÑ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ +
      I‚ÇÖ SmoothingF Œµ X œÉ‚ÇÇ +
      I‚ÇÜ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ +
      I‚Çá SmoothingF Œµ T X œÉ‚ÇÅ := by

  let z : ‚ÑÇ := œÉ‚ÇÇ - 3 * I
  let w : ‚ÑÇ := œÉ‚ÇÅ + 3 * I

  -- the leftmost rectangle is in the locus of holomorphicity
  have sub : z.Rectangle w ‚äÜ Icc œÉ‚ÇÇ 2 √ó‚ÑÇ Icc (-3) 3 \ {1} := by
    intro x hx

    constructor
    . -- x in box
      simp only [Rectangle, uIcc] at hx
      rw [Complex.mem_reProdIm] at hx ‚ä¢
      obtain ‚ü®hx_re, hx_im‚ü© := hx
      -- the real part of x is in the interval
      have hzw_re : z.re < w.re := by
        dsimp [z, w]
        linarith
      have x_re_bounds : z.re ‚â§ x.re ‚àß x.re ‚â§ w.re := by
        exact interval_membership x.re z.re w.re hx_re hzw_re
      have x_re_in_Icc : x.re ‚àà Icc œÉ‚ÇÇ 2 := by
        have ‚ü®h_left, h_right‚ü© := x_re_bounds
        have h_left' : œÉ‚ÇÇ ‚â§ x.re := by
          dsimp [z] at h_left
          linarith
        have h_right' : x.re ‚â§ 2 := by
          apply le_trans h_right
          dsimp [w]
          linarith
        exact ‚ü®h_left', h_right'‚ü©

      -- the imaginary part of x is in the interval
      have hzw_im : z.im < w.im := by
        dsimp [z, w]
        linarith
      have x_im_bounds : z.im ‚â§ x.im ‚àß x.im ‚â§ w.im := by
        exact interval_membership x.im z.im w.im hx_im hzw_im
      have x_im_in_Icc : x.im ‚àà Icc (-3) 3 := by
        have ‚ü®h_left, h_right‚ü© := x_im_bounds
        have h_left' : -3 ‚â§ x.im := by
          dsimp [z] at h_left
          linarith
        have h_right' : x.im ‚â§ 3 := by
          dsimp [w] at h_right
          linarith
        exact ‚ü®h_left', h_right'‚ü©

      exact ‚ü®x_re_in_Icc, x_im_in_Icc‚ü©
    -- x not in {1}
    . simp only [mem_singleton_iff]
      -- x has real part less than 1
      have x_re_upper: x.re ‚â§ œÉ‚ÇÅ := by
        simp only [Rectangle, uIcc] at hx
        rw [Complex.mem_reProdIm] at hx
        obtain ‚ü®hx_re, _‚ü© := hx
        -- the real part of x is in the interval
        have hzw_re : z.re < w.re := by
          dsimp [z, w]
          linarith
        have x_re_bounds : z.re ‚â§ x.re ‚àß x.re ‚â§ w.re := by
          exact interval_membership x.re z.re w.re hx_re hzw_re
        have x_re_upper' : x.re ‚â§ w.re := by exact x_re_bounds.2
        dsimp [w] at x_re_upper'
        linarith

      -- by contracdiction
      have h_x_ne_one : x ‚â† 1 := by
        intro h_eq
        have h_re : x.re = 1 := by rw [h_eq, Complex.one_re]
        have h1 : 1 ‚â§ œÉ‚ÇÅ := by
          rw [‚Üê h_re]
          exact x_re_upper
        linarith
      exact h_x_ne_one

  have zero_over_box := HolomorphicOn.vanishesOnRectangle holoOn2 sub

  -- split the vertial integral along the vertical line at `x = œÉ‚ÇÅ` into 3 segments at `a = -3` and `b = 3`
  -- the integral on `(-‚àû, -3)` is `I_3`
  -- the integral on `(3, ‚àû)` is `I_7`
  -- the integral on `[-3, 3]` is equal to `-I‚ÇÖ SmoothingF Œµ T X œÉ‚ÇÅ`.
  have splitting : I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ = I‚ÇÉ SmoothingF Œµ T X œÉ‚ÇÅ + I‚ÇÖ SmoothingF Œµ X œÉ‚ÇÅ + I‚Çá SmoothingF Œµ T X œÉ‚ÇÅ := by
    have := verticalIntegral_split_three_finite (a := -3) (b := 3)
    -- rw [verticalIntegral_split_three (a := -3) (b := 3)]





  -- computing the contour integral from I_3 to I_7 by adding and subtracting the
  -- integral leftmost box
  calc I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ = I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ - (1 / (2 * œÄ * I)) * (0 : ‚ÑÇ) := by simp
    _ = I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ - (1 / (2 * œÄ * I)) * (RectangleIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z w) := by rw [‚Üê zero_over_box]
    _ = I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ - (1 / (2 * œÄ * I)) * (HIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re w.re z.im
    - HIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re w.re w.im
    + VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) w.re z.im w.im
    - VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re z.im w.im) := by simp [RectangleIntegral]
    _ = I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ - ((1 / (2 * œÄ * I)) * HIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re w.re z.im
    - (1 / (2 * œÄ * I)) * HIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re w.re w.im
    + (1 / (2 * œÄ * I)) * VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) w.re z.im w.im
    - (1 / (2 * œÄ * I)) * VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re z.im w.im) := by ring
    _ = I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ - (I‚ÇÑ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ
    - (1 / (2 * œÄ * I)) * HIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re w.re w.im
    + (1 / (2 * œÄ * I)) * VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) w.re z.im w.im
    - (1 / (2 * œÄ * I)) * VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re z.im w.im) := by
      simp only [one_div, mul_inv_rev, inv_I, neg_mul, HIntegral, sub_im, ofReal_im, mul_im,
        re_ofNat, I_im, mul_one, im_ofNat, I_re, mul_zero, add_zero, zero_sub, ofReal_neg,
        ofReal_ofNat, sub_re, ofReal_re, mul_re, sub_self, sub_zero, add_re, add_im, zero_add,
        sub_neg_eq_add, I‚ÇÑ, sub_right_inj, add_left_inj, neg_inj, mul_eq_mul_left_iff, mul_eq_zero,
        I_ne_zero, inv_eq_zero, ofReal_eq_zero, OfNat.ofNat_ne_zero, or_false, false_or, z, w]
      left
      rfl
    _ = I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ - (I‚ÇÑ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ
    - I‚ÇÜ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ
    + (1 / (2 * œÄ * I)) * VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) w.re z.im w.im
    - (1 / (2 * œÄ * I)) * VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re z.im w.im) := by
      simp only [one_div, mul_inv_rev, inv_I, neg_mul, HIntegral, add_im, ofReal_im, mul_im,
        re_ofNat, I_im, mul_one, im_ofNat, I_re, mul_zero, add_zero, zero_add, ofReal_ofNat, sub_re,
        ofReal_re, mul_re, sub_self, sub_zero, add_re, sub_neg_eq_add, sub_im, zero_sub, I‚ÇÜ, w, z]
    _ = I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ - (I‚ÇÑ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ
    - I‚ÇÜ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ
    + I‚ÇÖ SmoothingF Œµ X œÉ‚ÇÅ
    - (1 / (2 * œÄ * I)) * VIntegral (SmoothedChebyshevIntegrand SmoothingF Œµ X) z.re z.im w.im) := by
      simp only [one_div, mul_inv_rev, inv_I, neg_mul, VIntegral, add_re, ofReal_re, mul_re,
        re_ofNat, I_re, mul_zero, im_ofNat, I_im, mul_one, sub_self, add_zero, sub_im, ofReal_im,
        mul_im, zero_sub, add_im, zero_add, smul_eq_mul, sub_re, sub_zero, sub_neg_eq_add, I‚ÇÖ,
        neg_add_cancel_right, sub_right_inj, w, z]
    _ = I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ - (I‚ÇÑ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ
    - I‚ÇÜ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ
    + I‚ÇÖ SmoothingF Œµ X œÉ‚ÇÅ
    - I‚ÇÖ SmoothingF Œµ X œÉ‚ÇÇ) := by
      simp only [I‚ÇÖ, one_div, mul_inv_rev, inv_I, neg_mul, VIntegral, sub_re, ofReal_re, mul_re,
        re_ofNat, I_re, mul_zero, im_ofNat, I_im, mul_one, sub_self, sub_zero, sub_im, ofReal_im,
        mul_im, add_zero, zero_sub, add_im, zero_add, smul_eq_mul, sub_neg_eq_add, z, w]


  sorry

    -- := by ring
    -- _ = I‚ÇÉ‚Çá SmoothingF Œµ T X œÉ‚ÇÅ - (I‚ÇÑ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ
    -- - I‚ÇÜ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ
    -- + I‚ÇÖ SmoothingF Œµ X œÉ‚ÇÇ
    -- - I‚ÇÖ SmoothingF Œµ X œÉ‚ÇÇ) := by
    --   simp only [I‚ÇÑ, I‚ÇÖ, I‚ÇÜ]
    --   ring_nf
    --   simp
      -- dsimp [RectangleIntegral]

/-%%
\begin{proof}\uses{HolomorphicOn.vanishesOnRectangle, I‚ÇÉ, I‚ÇÑ, I‚ÇÖ, I‚ÇÜ, I‚Çá, I‚ÇÉ‚Çá}
Mimic the proof of Lemma \ref{SmoothedChebyshevPull1}.
\end{proof}
%%-/

/-%%
We insert this information in $\psi_{\epsilon}$. We add and subtract the integral over the box
$[1-\delta,2] \times_{‚ÑÇ} [-T,T]$, which we evaluate as follows
\begin{theorem}[ZetaBoxEval]\label{ZetaBoxEval}\lean{ZetaBoxEval}\leanok
For all $\epsilon > 0$ sufficiently close to $0$, the rectangle integral over $[1-\delta,2] \times_{‚ÑÇ} [-T,T]$ of the integrand in
$\psi_{\epsilon}$ is
$$
\frac{X^{1}}{1}\mathcal{M}(\widetilde{1_{\epsilon}})(1)
= X(1+O(\epsilon))
,$$
where the implicit constant is independent of $X$.
\end{theorem}
%%-/
theorem ZetaBoxEval {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF) :
    ‚àÉ C, ‚àÄ·∂† Œµ in (nhdsWithin 0 (Ioi 0)), ‚àÄ X : ‚Ñù, 0 ‚â§ X ‚Üí
    ‚Äñùìú ((Smooth1 SmoothingF Œµ) ¬∑) 1 * X - X‚Äñ ‚â§ C * Œµ * X := by
  have := MellinOfSmooth1c ContDiffSmoothingF suppSmoothingF mass_one
  clear suppSmoothingF mass_one ContDiffSmoothingF
  rw[Asymptotics.isBigO_iff] at this
  obtain ‚ü®C, hC‚ü© := this
  use C
  have Œµpos : ‚àÄ·∂† (Œµ : ‚Ñù) in nhdsWithin 0 (Ioi 0), Œµ > 0 :=
    eventually_mem_of_tendsto_nhdsWithin fun ‚¶ÉU‚¶Ñ hU ‚Ü¶ hU
  filter_upwards [hC, Œµpos] with Œµ hC Œµpos
  rw[id_eq, norm_of_nonneg (le_of_lt Œµpos)] at hC
  intro X Xnne
  nth_rw 2 [‚Üê one_mul (X : ‚ÑÇ)]
  rw[‚Üê sub_mul, norm_mul, norm_real, norm_of_nonneg Xnne]
  exact mul_le_mul_of_nonneg_right hC Xnne

/-%%
\begin{proof}
\uses{MellinOfSmooth1c}
Unfold the definitions and apply Lemma \ref{MellinOfSmooth1c}.
\end{proof}
%%-/

/-%%
It remains to estimate all of the integrals.
%%-/

/-%%
This auxiliary lemme is useful for what follows.
\begin{lemma}[IBound_aux1]\label{IBound_aux1}\lean{IBound_aux1}\leanok
Given $k>0$, there exists $C>0$ so that for all $T>3$,
$$
\log T ^ k \le C \cdot T.
$$
\end{lemma}
%%-/
lemma IBound_aux1 {k : ‚Ñù} (k_pos : 0 < k) : ‚àÉ C > 0,
    ‚àÄ {T : ‚Ñù} (T_gt : 3 < T), Real.log T ^ k ‚â§ C * T := by
    sorry
/-%%
\begin{proof}
Elementary. Use `isLittleO_log_rpow_rpow_atTop` in Mathlib.
\end{proof}
%%-/

/-%%
\begin{lemma}[I1Bound]\label{I1Bound}\lean{I1Bound}\leanok
We have that
$$
\left|I_{1}(\nu, \epsilon, X, T)\
\right| \ll {X \over \epsilon T}
.
$$
Same with $I_9$.
\end{lemma}
%%-/
theorem I1Bound :
    ‚àÉ C > 0, ‚àÄ {SmoothingF : ‚Ñù ‚Üí ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    (X : ‚Ñù) (X_gt : 3 < X)
    {T : ‚Ñù} (T_gt : 3 < T) {œÉ‚ÇÅ : ‚Ñù}
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF) ,
    ‚ÄñI‚ÇÅ SmoothingF Œµ X T‚Äñ ‚â§ C * X / (Œµ * T) := by
  sorry

theorem I9Bound :
    ‚àÉ C > 0, ‚àÄ {SmoothingF : ‚Ñù ‚Üí ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    (X : ‚Ñù) (X_gt : 3 < X)
    {T : ‚Ñù} (T_gt : 3 < T) {œÉ‚ÇÅ : ‚Ñù}
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF) ,
    ‚ÄñI‚Çâ SmoothingF Œµ X T‚Äñ ‚â§ C * X / (Œµ * T) := by
  sorry

/-%%
\begin{proof}\uses{MellinOfSmooth1b, dlog_riemannZeta_bdd_on_vertical_lines', I‚ÇÅ}
  Unfold the definitions and apply the triangle inequality.
$$
\left|I_{1}(\nu, \epsilon, X, T)\right| =
\left|
\frac{1}{2\pi i} \int_{-\infty}^{-T}
\left(
\frac{-\zeta'}\zeta(\sigma_0 + t i)
\right)
 \mathcal M(\widetilde 1_\epsilon)(\sigma_0 + t i)
X^{\sigma_0 + t i}
\ i \ dt
\right|
$$
$$
\leq
\frac{1}{2\pi}
\left|
 \int_{-\infty}^{-T}
C
 \frac{C'}{\epsilon|\sigma_0 + t i|^2}
X^{\sigma_0}
\ dt
\right|
$$
where we used Theorems \ref{MellinOfSmooth1b} and
\ref{dlog_riemannZeta_bdd_on_vertical_lines'}. Continuing the calculation, we have
$$
\leq
C'' {X^{\sigma_0}\over \epsilon}
\int_{-\infty}^{-T}
\frac{1}{t^2}
\ dt
$$
$$
\leq
C'''  {X\over \epsilon T}
,
$$
where we used that $\sigma_0=1+1/\log X$, and $X^{\sigma_0} = X\cdot X^{1/\log X}=e \cdot X$.
\end{proof}
%%-/

/-%%
\begin{lemma}[I2Bound]\label{I2Bound}\lean{I2Bound}\leanok
We have that
$$
\left|I_{2}(\nu, \epsilon, X, T)\right| \ll {X\over \epsilon T}
.
$$
Same with $I_8$.
\end{lemma}
%%-/
lemma I2Bound : ‚àÉ (C : ‚Ñù) (_ : 0 < C) (A : ‚Ñù) (_ : A ‚àà Ioo 0 (1/2)), ‚àÄ {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (X : ‚Ñù) (X_gt : 3 < X) {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    {T : ‚Ñù} (T_gt : 3 < T)
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF),
    let œÉ‚ÇÅ : ‚Ñù := 1 - A / (Real.log X) ^ 9
    ‚ÄñI‚ÇÇ SmoothingF Œµ X T œÉ‚ÇÅ‚Äñ ‚â§ C * X / (Œµ * T) := by
  sorry

lemma I8Bound : ‚àÉ (C : ‚Ñù) (_ : 0 < C) (A : ‚Ñù) (_ : A ‚àà Ioo 0 (1/2)), ‚àÄ {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (X : ‚Ñù) (X_gt : 3 < X) {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    {T : ‚Ñù} (T_gt : 3 < T)
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF),
    let œÉ‚ÇÅ : ‚Ñù := 1 - A / (Real.log X) ^ 9
    ‚ÄñI‚Çà SmoothingF Œµ X T œÉ‚ÇÅ‚Äñ ‚â§ C * X / (Œµ * T) := by
  sorry
/-%%
\begin{proof}\uses{MellinOfSmooth1b, LogDerivZetaBndUniform, I‚ÇÇ}
Unfold the definitions and apply the triangle inequality.
$$
\left|I_{2}(\nu, \epsilon, X, T, \sigma_1)\right| =
\left|\frac{1}{2\pi i} \int_{\sigma_1}^{\sigma_0}
\left(\frac{-\zeta'}\zeta(\sigma - T i) \right)
\mathcal M(\widetilde 1_\epsilon)(\sigma - T i)
X^{\sigma - T i}
 \ d\sigma
\right|
$$
$$\leq
\frac{1}{2\pi}
\int_{\sigma_1}^{\sigma_0}
C \cdot \log T ^ 9
\frac{C'}{\epsilon|\sigma - T i|^2}
X^{\sigma_0}
 \ d\sigma
 \leq
C'' \cdot {X\log T^9 \over \epsilon T^2}
,
$$
where we used Theorems \ref{MellinOfSmooth1b} and \ref{LogDerivZetaBndUniform}, and the fact that
$X^\sigma \le X^{\sigma_0} = X\cdot X^{1/\log X}=e \cdot X$.
Since $T>3$, we have $\log T^9 \leq C''' T$.
\end{proof}
%%-/

/-%%
\begin{lemma}[I3Bound]\label{I3Bound}\lean{I3Bound}\leanok
We have that
$$
\left|I_{3}(\nu, \epsilon, X, T)\right| \ll {X\over \epsilon}\, X^{-\frac{A}{(\log T)^9}}
.
$$
Same with $I_7$.
\end{lemma}
%%-/
lemma I3Bound : ‚àÉ (C : ‚Ñù) (_ : 0 < C) (A : ‚Ñù) (_ : A ‚àà Ioo 0 (1/2)), ‚àÄ {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (X : ‚Ñù) (X_gt : 3 < X) {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    {T : ‚Ñù} (T_gt : 3 < T)
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF),
    let œÉ‚ÇÅ : ‚Ñù := 1 - A / (Real.log X) ^ 9
    ‚ÄñI‚ÇÉ SmoothingF Œµ X T œÉ‚ÇÅ‚Äñ ‚â§ C * X * X ^ (- A / (Real.log T ^ 9)) / Œµ  := by
  sorry

lemma I7Bound : ‚àÉ (C : ‚Ñù) (_ : 0 < C) (A : ‚Ñù) (_ : A ‚àà Ioo 0 (1/2)), ‚àÄ {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (X : ‚Ñù) (X_gt : 3 < X) {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    {T : ‚Ñù} (T_gt : 3 < T)
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF),
    let œÉ‚ÇÅ : ‚Ñù := 1 - A / (Real.log X) ^ 9
    ‚ÄñI‚Çá SmoothingF Œµ X T œÉ‚ÇÅ‚Äñ ‚â§ C * X * X ^ (- A / (Real.log T ^ 9)) / Œµ  := by
  sorry
/-%%
\begin{proof}\uses{MellinOfSmooth1b, LogDerivZetaBnd, I‚ÇÉ}
Unfold the definitions and apply the triangle inequality.
$$
\left|I_{3}(\nu, \epsilon, X, T, \sigma_1)\right| =
\left|\frac{1}{2\pi i} \int_{-T}^3
\left(\frac{-\zeta'}\zeta(\sigma_1 + t i) \right)
\mathcal M(\widetilde 1_\epsilon)(\sigma_1 + t i)
X^{\sigma_1 + t i}
\ i \ dt
\right|
$$
$$\leq
\frac{1}{2\pi}
\int_{-T}^3
C \cdot \log t ^ 9
\frac{C'}{\epsilon|\sigma_1 + t i|^2}
X^{\sigma_1}
 \ dt
,
$$
where we used Theorems \ref{MellinOfSmooth1b} and \ref{LogDerivZetaBnd}.
Now we estimate $X^{\sigma_1} = X \cdot X^{-A/ \log T^9}$, and the integral is absolutely bounded.
\end{proof}
%%-/

/-%%
\begin{lemma}[I4Bound]\label{I4Bound}\lean{I4Bound}\leanok
We have that
$$
\left|I_{4}(\nu, \epsilon, X, \sigma_1, \sigma_2)\right| \ll {X\over \epsilon}\,
 X^{-\frac{A}{(\log T)^9}}
.
$$
Same with $I_6$.
\end{lemma}
%%-/
lemma I4Bound : ‚àÉ (C : ‚Ñù) (_ : 0 < C) (A : ‚Ñù) (_ : A ‚àà Ioo 0 (1/2)) (œÉ‚ÇÇ : ‚Ñù) (_ : œÉ‚ÇÇ ‚àà Ioo 0 1),
    ‚àÄ {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (X : ‚Ñù) (X_gt : 3 < X) {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    {T : ‚Ñù} (T_gt : 3 < T)
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF),
    let œÉ‚ÇÅ : ‚Ñù := 1 - A / (Real.log X) ^ 9
    ‚ÄñI‚ÇÑ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ‚Äñ ‚â§ C * X * X ^ (- A / (Real.log T ^ 9)) / Œµ := by
  sorry

lemma I6Bound : ‚àÉ (C : ‚Ñù) (_ : 0 < C) (A : ‚Ñù) (_ : A ‚àà Ioo 0 (1/2)) (œÉ‚ÇÇ : ‚Ñù) (_ : œÉ‚ÇÇ ‚àà Ioo 0 1),
    ‚àÄ {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (X : ‚Ñù) (X_gt : 3 < X) {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    {T : ‚Ñù} (T_gt : 3 < T)
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF),
    let œÉ‚ÇÅ : ‚Ñù := 1 - A / (Real.log X) ^ 9
    ‚ÄñI‚ÇÜ SmoothingF Œµ X œÉ‚ÇÅ œÉ‚ÇÇ‚Äñ ‚â§ C * X * X ^ (- A / (Real.log T ^ 9)) / Œµ := by
  sorry
/-%%
\begin{proof}\uses{MellinOfSmooth1b, LogDerivZetaBndAlt, I‚ÇÑ}
The analysis of $I_4$ is similar to that of $I_2$, (in Lemma \ref{I2Bound}) but even easier.
Let $C$ be the sup of $-\zeta'/\zeta$ on the curve $\sigma_2 + 3 i$ to $1+ 3i$ (this curve is compact, and away from the pole at $s=1$).
Apply Theorem \ref{MellinOfSmooth1b} to get the bound $1/(\epsilon |s|^2)$, which is bounded by $C'/\epsilon$.
And $X^s$ is bounded by $X^{\sigma_1} = X \cdot X^{-A/ \log T^9}$.
Putting these together gives the result.
\end{proof}
%%-/

/-%%
\begin{lemma}[I5Bound]\label{I5Bound}\lean{I5Bound}\leanok
We have that
$$
\left|I_{5}(\nu, \epsilon, X, \sigma_2)\right| \ll {X^{\sigma_2} \over \epsilon}.
$$
\end{lemma}
%%-/
lemma I5Bound : ‚àÉ (C : ‚Ñù) (_ : 0 < C) (œÉ‚ÇÇ : ‚Ñù) (_ : œÉ‚ÇÇ ‚àà Ioo 0 1), ‚àÄ {SmoothingF : ‚Ñù ‚Üí ‚Ñù}
    (X : ‚Ñù) (X_gt : 3 < X) {Œµ : ‚Ñù} (Œµ_pos: 0 < Œµ)
    (Œµ_lt_one : Œµ < 1)
    (suppSmoothingF : Function.support SmoothingF ‚äÜ Icc (1 / 2) 2)
    (SmoothingFnonneg : ‚àÄ x > 0, 0 ‚â§ SmoothingF x)
    (mass_one : ‚à´ x in Ioi 0, SmoothingF x / x = 1)
    (ContDiffSmoothingF : ContDiff ‚Ñù 1 SmoothingF),
    ‚ÄñI‚ÇÖ SmoothingF Œµ X œÉ‚ÇÇ‚Äñ ‚â§ C * X ^ œÉ‚ÇÇ / Œµ := by
  sorry
/-%%
\begin{proof}\uses{MellinOfSmooth1b, LogDerivZetaHolcSmallT, I‚ÇÖ}
Here $\zeta'/\zeta$ is absolutely bounded on the compact interval $\sigma_2 + i [-3,3]$, and
$X^s$ is bounded by $X^{\sigma_2}$. Using Theorem \ref{MellinOfSmooth1b} gives the bound $1/(\epsilon |s|^2)$, which is bounded by $C'/\epsilon$.
Putting these together gives the result.
\end{proof}
%%-/

/-%%
\section{MediumPNT}

\begin{theorem}[MediumPNT]\label{MediumPNT}  We have
$$ \sum_{n \leq x} \Lambda(n) = x + O(x \exp(-c(\log x)^{1/10})).$$
\end{theorem}
%%-/
/-- *** Prime Number Theorem (Medium Strength) *** The `ChebyshevPsi` function is asymptotic to `x`. -/
theorem MediumPNT : ‚àÉ c > 0,
    (œà - id) =O[atTop]
      fun (x : ‚Ñù) ‚Ü¶ x * Real.exp (-c * (Real.log x) ^ ((1 : ‚Ñù) / 10)) := by
  let c : ‚Ñù := sorry
  have cpos : 0 < c := sorry
  refine ‚ü®c, cpos, ?_‚ü©
  rw [Asymptotics.isBigO_iff]
  let C : ‚Ñù := sorry
  refine ‚ü®C, ?_‚ü©
  rw [Filter.eventually_atTop]
  let X‚ÇÄ : ‚Ñù := sorry
  refine ‚ü®X‚ÇÄ, ?_‚ü©
  intro X X_ge_X‚ÇÄ

  sorry
/-%%
\begin{proof}
\uses{ChebyshevPsi, SmoothedChebyshevClose, LogDerivZetaBndAlt, ZetaBoxEval, LogDerivZetaBndUniform, LogDerivZetaHolcSmallT, LogDerivZetaHolcLargeT,
SmoothedChebyshevPull1, SmoothedChebyshevPull2}
  Evaluate the integrals.
\end{proof}
%%-/

-- #check MediumPNT
